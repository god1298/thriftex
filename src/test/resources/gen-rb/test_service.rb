#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'test_types'

module Thrift
  module Test
    module TestService
      class Client
        include ::Thrift::Client

        def maketimeout()
          send_maketimeout()
          recv_maketimeout()
        end

        def send_maketimeout()
          send_message('maketimeout', Maketimeout_args)
        end

        def recv_maketimeout()
          result = receive_message(Maketimeout_result)
          return
        end

        def put(foo)
          send_put(foo)
          return recv_put()
        end

        def send_put(foo)
          send_message('put', Put_args, :foo => foo)
        end

        def recv_put()
          result = receive_message(Put_result)
          return result.success unless result.success.nil?
          raise result.fe unless result.fe.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'put failed: unknown result')
        end

        def get(name)
          send_get(name)
          return recv_get()
        end

        def send_get(name)
          send_message('get', Get_args, :name => name)
        end

        def recv_get()
          result = receive_message(Get_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_maketimeout(seqid, iprot, oprot)
          args = read_args(iprot, Maketimeout_args)
          result = Maketimeout_result.new()
          @handler.maketimeout()
          write_result(result, oprot, 'maketimeout', seqid)
        end

        def process_put(seqid, iprot, oprot)
          args = read_args(iprot, Put_args)
          result = Put_result.new()
          begin
            result.success = @handler.put(args.foo)
          rescue ::Thrift::Test::FooException => fe
            result.fe = fe
          end
          write_result(result, oprot, 'put', seqid)
        end

        def process_get(seqid, iprot, oprot)
          args = read_args(iprot, Get_args)
          result = Get_result.new()
          result.success = @handler.get(args.name)
          write_result(result, oprot, 'get', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Maketimeout_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Maketimeout_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Put_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        FOO = 1

        FIELDS = {
          FOO => {:type => ::Thrift::Types::STRUCT, :name => 'foo', :class => ::Thrift::Test::Foo}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Put_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        FE = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'},
          FE => {:type => ::Thrift::Types::STRUCT, :name => 'fe', :class => ::Thrift::Test::FooException}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        NAME = 1

        FIELDS = {
          NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Get_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end
