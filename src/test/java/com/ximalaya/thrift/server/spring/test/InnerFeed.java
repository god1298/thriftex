/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ximalaya.thrift.server.spring.test;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class InnerFeed implements org.apache.thrift.TBase<InnerFeed, InnerFeed._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InnerFeed");

  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IMAGE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("imagePath", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RECORD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("recordID", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TO_TID_FIELD_DESC = new org.apache.thrift.protocol.TField("toTid", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CID_FIELD_DESC = new org.apache.thrift.protocol.TField("cid", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField C_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField M_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("mUrl", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField USER_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("userSource", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField WT_IMAGE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("wtImagePath", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField TO_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("toImage", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField UPLOAD_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadSource", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField WAVEFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("waveform", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField ALBUM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("albumID", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField ALBUM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("albumName", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField TO_FEEDID_FIELD_DESC = new org.apache.thrift.protocol.TField("toFeedid", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField TO_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("toUid", org.apache.thrift.protocol.TType.I64, (short)22);
  private static final org.apache.thrift.protocol.TField TO_NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("toNickName", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField TRANSMIT_CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("transmitCreatedAt", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InnerFeedStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InnerFeedTupleSchemeFactory());
  }

  public long uid; // required
  public long createdAt; // required
  public String nickName; // required
  public String type; // required
  public String imagePath; // optional
  public long recordID; // required
  public long toTid; // required
  public long cid; // optional
  public String title; // optional
  public String url; // optional
  public double duration; // required
  public String cName; // optional
  public String mUrl; // optional
  public int userSource; // optional
  public String wtImagePath; // optional
  public String toImage; // optional
  public int uploadSource; // optional
  public String waveform; // optional
  public long albumID; // optional
  public String albumName; // optional
  public long toFeedid; // optional
  public long toUid; // optional
  public String toNickName; // optional
  public long transmitCreatedAt; // optional
  public String content; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UID((short)1, "uid"),
    CREATED_AT((short)2, "createdAt"),
    NICK_NAME((short)3, "nickName"),
    TYPE((short)4, "type"),
    IMAGE_PATH((short)5, "imagePath"),
    RECORD_ID((short)6, "recordID"),
    TO_TID((short)7, "toTid"),
    CID((short)8, "cid"),
    TITLE((short)9, "title"),
    URL((short)10, "url"),
    DURATION((short)11, "duration"),
    C_NAME((short)12, "cName"),
    M_URL((short)13, "mUrl"),
    USER_SOURCE((short)14, "userSource"),
    WT_IMAGE_PATH((short)15, "wtImagePath"),
    TO_IMAGE((short)16, "toImage"),
    UPLOAD_SOURCE((short)17, "uploadSource"),
    WAVEFORM((short)18, "waveform"),
    ALBUM_ID((short)19, "albumID"),
    ALBUM_NAME((short)20, "albumName"),
    TO_FEEDID((short)21, "toFeedid"),
    TO_UID((short)22, "toUid"),
    TO_NICK_NAME((short)23, "toNickName"),
    TRANSMIT_CREATED_AT((short)24, "transmitCreatedAt"),
    CONTENT((short)25, "content");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UID
          return UID;
        case 2: // CREATED_AT
          return CREATED_AT;
        case 3: // NICK_NAME
          return NICK_NAME;
        case 4: // TYPE
          return TYPE;
        case 5: // IMAGE_PATH
          return IMAGE_PATH;
        case 6: // RECORD_ID
          return RECORD_ID;
        case 7: // TO_TID
          return TO_TID;
        case 8: // CID
          return CID;
        case 9: // TITLE
          return TITLE;
        case 10: // URL
          return URL;
        case 11: // DURATION
          return DURATION;
        case 12: // C_NAME
          return C_NAME;
        case 13: // M_URL
          return M_URL;
        case 14: // USER_SOURCE
          return USER_SOURCE;
        case 15: // WT_IMAGE_PATH
          return WT_IMAGE_PATH;
        case 16: // TO_IMAGE
          return TO_IMAGE;
        case 17: // UPLOAD_SOURCE
          return UPLOAD_SOURCE;
        case 18: // WAVEFORM
          return WAVEFORM;
        case 19: // ALBUM_ID
          return ALBUM_ID;
        case 20: // ALBUM_NAME
          return ALBUM_NAME;
        case 21: // TO_FEEDID
          return TO_FEEDID;
        case 22: // TO_UID
          return TO_UID;
        case 23: // TO_NICK_NAME
          return TO_NICK_NAME;
        case 24: // TRANSMIT_CREATED_AT
          return TRANSMIT_CREATED_AT;
        case 25: // CONTENT
          return CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UID_ISSET_ID = 0;
  private static final int __CREATEDAT_ISSET_ID = 1;
  private static final int __RECORDID_ISSET_ID = 2;
  private static final int __TOTID_ISSET_ID = 3;
  private static final int __CID_ISSET_ID = 4;
  private static final int __DURATION_ISSET_ID = 5;
  private static final int __USERSOURCE_ISSET_ID = 6;
  private static final int __UPLOADSOURCE_ISSET_ID = 7;
  private static final int __ALBUMID_ISSET_ID = 8;
  private static final int __TOFEEDID_ISSET_ID = 9;
  private static final int __TOUID_ISSET_ID = 10;
  private static final int __TRANSMITCREATEDAT_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.IMAGE_PATH,_Fields.CID,_Fields.TITLE,_Fields.URL,_Fields.C_NAME,_Fields.M_URL,_Fields.USER_SOURCE,_Fields.WT_IMAGE_PATH,_Fields.TO_IMAGE,_Fields.UPLOAD_SOURCE,_Fields.WAVEFORM,_Fields.ALBUM_ID,_Fields.ALBUM_NAME,_Fields.TO_FEEDID,_Fields.TO_UID,_Fields.TO_NICK_NAME,_Fields.TRANSMIT_CREATED_AT,_Fields.CONTENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_PATH, new org.apache.thrift.meta_data.FieldMetaData("imagePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECORD_ID, new org.apache.thrift.meta_data.FieldMetaData("recordID", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TO_TID, new org.apache.thrift.meta_data.FieldMetaData("toTid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CID, new org.apache.thrift.meta_data.FieldMetaData("cid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.C_NAME, new org.apache.thrift.meta_data.FieldMetaData("cName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.M_URL, new org.apache.thrift.meta_data.FieldMetaData("mUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("userSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WT_IMAGE_PATH, new org.apache.thrift.meta_data.FieldMetaData("wtImagePath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("toImage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPLOAD_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("uploadSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WAVEFORM, new org.apache.thrift.meta_data.FieldMetaData("waveform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALBUM_ID, new org.apache.thrift.meta_data.FieldMetaData("albumID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ALBUM_NAME, new org.apache.thrift.meta_data.FieldMetaData("albumName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_FEEDID, new org.apache.thrift.meta_data.FieldMetaData("toFeedid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TO_UID, new org.apache.thrift.meta_data.FieldMetaData("toUid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TO_NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("toNickName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRANSMIT_CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("transmitCreatedAt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InnerFeed.class, metaDataMap);
  }

  public InnerFeed() {
  }

  public InnerFeed(
    long uid,
    long createdAt,
    String nickName,
    String type,
    long recordID,
    long toTid,
    double duration)
  {
    this();
    this.uid = uid;
    setUidIsSet(true);
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    this.nickName = nickName;
    this.type = type;
    this.recordID = recordID;
    setRecordIDIsSet(true);
    this.toTid = toTid;
    setToTidIsSet(true);
    this.duration = duration;
    setDurationIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InnerFeed(InnerFeed other) {
    __isset_bitfield = other.__isset_bitfield;
    this.uid = other.uid;
    this.createdAt = other.createdAt;
    if (other.isSetNickName()) {
      this.nickName = other.nickName;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetImagePath()) {
      this.imagePath = other.imagePath;
    }
    this.recordID = other.recordID;
    this.toTid = other.toTid;
    this.cid = other.cid;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.duration = other.duration;
    if (other.isSetCName()) {
      this.cName = other.cName;
    }
    if (other.isSetMUrl()) {
      this.mUrl = other.mUrl;
    }
    this.userSource = other.userSource;
    if (other.isSetWtImagePath()) {
      this.wtImagePath = other.wtImagePath;
    }
    if (other.isSetToImage()) {
      this.toImage = other.toImage;
    }
    this.uploadSource = other.uploadSource;
    if (other.isSetWaveform()) {
      this.waveform = other.waveform;
    }
    this.albumID = other.albumID;
    if (other.isSetAlbumName()) {
      this.albumName = other.albumName;
    }
    this.toFeedid = other.toFeedid;
    this.toUid = other.toUid;
    if (other.isSetToNickName()) {
      this.toNickName = other.toNickName;
    }
    this.transmitCreatedAt = other.transmitCreatedAt;
    if (other.isSetContent()) {
      this.content = other.content;
    }
  }

  public InnerFeed deepCopy() {
    return new InnerFeed(this);
  }

  @Override
  public void clear() {
    setUidIsSet(false);
    this.uid = 0;
    setCreatedAtIsSet(false);
    this.createdAt = 0;
    this.nickName = null;
    this.type = null;
    this.imagePath = null;
    setRecordIDIsSet(false);
    this.recordID = 0;
    setToTidIsSet(false);
    this.toTid = 0;
    setCidIsSet(false);
    this.cid = 0;
    this.title = null;
    this.url = null;
    setDurationIsSet(false);
    this.duration = 0.0;
    this.cName = null;
    this.mUrl = null;
    setUserSourceIsSet(false);
    this.userSource = 0;
    this.wtImagePath = null;
    this.toImage = null;
    setUploadSourceIsSet(false);
    this.uploadSource = 0;
    this.waveform = null;
    setAlbumIDIsSet(false);
    this.albumID = 0;
    this.albumName = null;
    setToFeedidIsSet(false);
    this.toFeedid = 0;
    setToUidIsSet(false);
    this.toUid = 0;
    this.toNickName = null;
    setTransmitCreatedAtIsSet(false);
    this.transmitCreatedAt = 0;
    this.content = null;
  }

  public long getUid() {
    return this.uid;
  }

  public InnerFeed setUid(long uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public long getCreatedAt() {
    return this.createdAt;
  }

  public InnerFeed setCreatedAt(long createdAt) {
    this.createdAt = createdAt;
    setCreatedAtIsSet(true);
    return this;
  }

  public void unsetCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDAT_ISSET_ID);
  }

  public void setCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDAT_ISSET_ID, value);
  }

  public String getNickName() {
    return this.nickName;
  }

  public InnerFeed setNickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

  public void unsetNickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNickName() {
    return this.nickName != null;
  }

  public void setNickNameIsSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public InnerFeed setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getImagePath() {
    return this.imagePath;
  }

  public InnerFeed setImagePath(String imagePath) {
    this.imagePath = imagePath;
    return this;
  }

  public void unsetImagePath() {
    this.imagePath = null;
  }

  /** Returns true if field imagePath is set (has been assigned a value) and false otherwise */
  public boolean isSetImagePath() {
    return this.imagePath != null;
  }

  public void setImagePathIsSet(boolean value) {
    if (!value) {
      this.imagePath = null;
    }
  }

  public long getRecordID() {
    return this.recordID;
  }

  public InnerFeed setRecordID(long recordID) {
    this.recordID = recordID;
    setRecordIDIsSet(true);
    return this;
  }

  public void unsetRecordID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDID_ISSET_ID);
  }

  /** Returns true if field recordID is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordID() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDID_ISSET_ID);
  }

  public void setRecordIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDID_ISSET_ID, value);
  }

  public long getToTid() {
    return this.toTid;
  }

  public InnerFeed setToTid(long toTid) {
    this.toTid = toTid;
    setToTidIsSet(true);
    return this;
  }

  public void unsetToTid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTID_ISSET_ID);
  }

  /** Returns true if field toTid is set (has been assigned a value) and false otherwise */
  public boolean isSetToTid() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTID_ISSET_ID);
  }

  public void setToTidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTID_ISSET_ID, value);
  }

  public long getCid() {
    return this.cid;
  }

  public InnerFeed setCid(long cid) {
    this.cid = cid;
    setCidIsSet(true);
    return this;
  }

  public void unsetCid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CID_ISSET_ID);
  }

  /** Returns true if field cid is set (has been assigned a value) and false otherwise */
  public boolean isSetCid() {
    return EncodingUtils.testBit(__isset_bitfield, __CID_ISSET_ID);
  }

  public void setCidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public InnerFeed setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public InnerFeed setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public double getDuration() {
    return this.duration;
  }

  public InnerFeed setDuration(double duration) {
    this.duration = duration;
    setDurationIsSet(true);
    return this;
  }

  public void unsetDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
  }

  public String getCName() {
    return this.cName;
  }

  public InnerFeed setCName(String cName) {
    this.cName = cName;
    return this;
  }

  public void unsetCName() {
    this.cName = null;
  }

  /** Returns true if field cName is set (has been assigned a value) and false otherwise */
  public boolean isSetCName() {
    return this.cName != null;
  }

  public void setCNameIsSet(boolean value) {
    if (!value) {
      this.cName = null;
    }
  }

  public String getMUrl() {
    return this.mUrl;
  }

  public InnerFeed setMUrl(String mUrl) {
    this.mUrl = mUrl;
    return this;
  }

  public void unsetMUrl() {
    this.mUrl = null;
  }

  /** Returns true if field mUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetMUrl() {
    return this.mUrl != null;
  }

  public void setMUrlIsSet(boolean value) {
    if (!value) {
      this.mUrl = null;
    }
  }

  public int getUserSource() {
    return this.userSource;
  }

  public InnerFeed setUserSource(int userSource) {
    this.userSource = userSource;
    setUserSourceIsSet(true);
    return this;
  }

  public void unsetUserSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERSOURCE_ISSET_ID);
  }

  /** Returns true if field userSource is set (has been assigned a value) and false otherwise */
  public boolean isSetUserSource() {
    return EncodingUtils.testBit(__isset_bitfield, __USERSOURCE_ISSET_ID);
  }

  public void setUserSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERSOURCE_ISSET_ID, value);
  }

  public String getWtImagePath() {
    return this.wtImagePath;
  }

  public InnerFeed setWtImagePath(String wtImagePath) {
    this.wtImagePath = wtImagePath;
    return this;
  }

  public void unsetWtImagePath() {
    this.wtImagePath = null;
  }

  /** Returns true if field wtImagePath is set (has been assigned a value) and false otherwise */
  public boolean isSetWtImagePath() {
    return this.wtImagePath != null;
  }

  public void setWtImagePathIsSet(boolean value) {
    if (!value) {
      this.wtImagePath = null;
    }
  }

  public String getToImage() {
    return this.toImage;
  }

  public InnerFeed setToImage(String toImage) {
    this.toImage = toImage;
    return this;
  }

  public void unsetToImage() {
    this.toImage = null;
  }

  /** Returns true if field toImage is set (has been assigned a value) and false otherwise */
  public boolean isSetToImage() {
    return this.toImage != null;
  }

  public void setToImageIsSet(boolean value) {
    if (!value) {
      this.toImage = null;
    }
  }

  public int getUploadSource() {
    return this.uploadSource;
  }

  public InnerFeed setUploadSource(int uploadSource) {
    this.uploadSource = uploadSource;
    setUploadSourceIsSet(true);
    return this;
  }

  public void unsetUploadSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPLOADSOURCE_ISSET_ID);
  }

  /** Returns true if field uploadSource is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadSource() {
    return EncodingUtils.testBit(__isset_bitfield, __UPLOADSOURCE_ISSET_ID);
  }

  public void setUploadSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPLOADSOURCE_ISSET_ID, value);
  }

  public String getWaveform() {
    return this.waveform;
  }

  public InnerFeed setWaveform(String waveform) {
    this.waveform = waveform;
    return this;
  }

  public void unsetWaveform() {
    this.waveform = null;
  }

  /** Returns true if field waveform is set (has been assigned a value) and false otherwise */
  public boolean isSetWaveform() {
    return this.waveform != null;
  }

  public void setWaveformIsSet(boolean value) {
    if (!value) {
      this.waveform = null;
    }
  }

  public long getAlbumID() {
    return this.albumID;
  }

  public InnerFeed setAlbumID(long albumID) {
    this.albumID = albumID;
    setAlbumIDIsSet(true);
    return this;
  }

  public void unsetAlbumID() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALBUMID_ISSET_ID);
  }

  /** Returns true if field albumID is set (has been assigned a value) and false otherwise */
  public boolean isSetAlbumID() {
    return EncodingUtils.testBit(__isset_bitfield, __ALBUMID_ISSET_ID);
  }

  public void setAlbumIDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALBUMID_ISSET_ID, value);
  }

  public String getAlbumName() {
    return this.albumName;
  }

  public InnerFeed setAlbumName(String albumName) {
    this.albumName = albumName;
    return this;
  }

  public void unsetAlbumName() {
    this.albumName = null;
  }

  /** Returns true if field albumName is set (has been assigned a value) and false otherwise */
  public boolean isSetAlbumName() {
    return this.albumName != null;
  }

  public void setAlbumNameIsSet(boolean value) {
    if (!value) {
      this.albumName = null;
    }
  }

  public long getToFeedid() {
    return this.toFeedid;
  }

  public InnerFeed setToFeedid(long toFeedid) {
    this.toFeedid = toFeedid;
    setToFeedidIsSet(true);
    return this;
  }

  public void unsetToFeedid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOFEEDID_ISSET_ID);
  }

  /** Returns true if field toFeedid is set (has been assigned a value) and false otherwise */
  public boolean isSetToFeedid() {
    return EncodingUtils.testBit(__isset_bitfield, __TOFEEDID_ISSET_ID);
  }

  public void setToFeedidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOFEEDID_ISSET_ID, value);
  }

  public long getToUid() {
    return this.toUid;
  }

  public InnerFeed setToUid(long toUid) {
    this.toUid = toUid;
    setToUidIsSet(true);
    return this;
  }

  public void unsetToUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOUID_ISSET_ID);
  }

  /** Returns true if field toUid is set (has been assigned a value) and false otherwise */
  public boolean isSetToUid() {
    return EncodingUtils.testBit(__isset_bitfield, __TOUID_ISSET_ID);
  }

  public void setToUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOUID_ISSET_ID, value);
  }

  public String getToNickName() {
    return this.toNickName;
  }

  public InnerFeed setToNickName(String toNickName) {
    this.toNickName = toNickName;
    return this;
  }

  public void unsetToNickName() {
    this.toNickName = null;
  }

  /** Returns true if field toNickName is set (has been assigned a value) and false otherwise */
  public boolean isSetToNickName() {
    return this.toNickName != null;
  }

  public void setToNickNameIsSet(boolean value) {
    if (!value) {
      this.toNickName = null;
    }
  }

  public long getTransmitCreatedAt() {
    return this.transmitCreatedAt;
  }

  public InnerFeed setTransmitCreatedAt(long transmitCreatedAt) {
    this.transmitCreatedAt = transmitCreatedAt;
    setTransmitCreatedAtIsSet(true);
    return this;
  }

  public void unsetTransmitCreatedAt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSMITCREATEDAT_ISSET_ID);
  }

  /** Returns true if field transmitCreatedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetTransmitCreatedAt() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSMITCREATEDAT_ISSET_ID);
  }

  public void setTransmitCreatedAtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSMITCREATEDAT_ISSET_ID, value);
  }

  public String getContent() {
    return this.content;
  }

  public InnerFeed setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Long)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((Long)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unsetNickName();
      } else {
        setNickName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case IMAGE_PATH:
      if (value == null) {
        unsetImagePath();
      } else {
        setImagePath((String)value);
      }
      break;

    case RECORD_ID:
      if (value == null) {
        unsetRecordID();
      } else {
        setRecordID((Long)value);
      }
      break;

    case TO_TID:
      if (value == null) {
        unsetToTid();
      } else {
        setToTid((Long)value);
      }
      break;

    case CID:
      if (value == null) {
        unsetCid();
      } else {
        setCid((Long)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Double)value);
      }
      break;

    case C_NAME:
      if (value == null) {
        unsetCName();
      } else {
        setCName((String)value);
      }
      break;

    case M_URL:
      if (value == null) {
        unsetMUrl();
      } else {
        setMUrl((String)value);
      }
      break;

    case USER_SOURCE:
      if (value == null) {
        unsetUserSource();
      } else {
        setUserSource((Integer)value);
      }
      break;

    case WT_IMAGE_PATH:
      if (value == null) {
        unsetWtImagePath();
      } else {
        setWtImagePath((String)value);
      }
      break;

    case TO_IMAGE:
      if (value == null) {
        unsetToImage();
      } else {
        setToImage((String)value);
      }
      break;

    case UPLOAD_SOURCE:
      if (value == null) {
        unsetUploadSource();
      } else {
        setUploadSource((Integer)value);
      }
      break;

    case WAVEFORM:
      if (value == null) {
        unsetWaveform();
      } else {
        setWaveform((String)value);
      }
      break;

    case ALBUM_ID:
      if (value == null) {
        unsetAlbumID();
      } else {
        setAlbumID((Long)value);
      }
      break;

    case ALBUM_NAME:
      if (value == null) {
        unsetAlbumName();
      } else {
        setAlbumName((String)value);
      }
      break;

    case TO_FEEDID:
      if (value == null) {
        unsetToFeedid();
      } else {
        setToFeedid((Long)value);
      }
      break;

    case TO_UID:
      if (value == null) {
        unsetToUid();
      } else {
        setToUid((Long)value);
      }
      break;

    case TO_NICK_NAME:
      if (value == null) {
        unsetToNickName();
      } else {
        setToNickName((String)value);
      }
      break;

    case TRANSMIT_CREATED_AT:
      if (value == null) {
        unsetTransmitCreatedAt();
      } else {
        setTransmitCreatedAt((Long)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UID:
      return Long.valueOf(getUid());

    case CREATED_AT:
      return Long.valueOf(getCreatedAt());

    case NICK_NAME:
      return getNickName();

    case TYPE:
      return getType();

    case IMAGE_PATH:
      return getImagePath();

    case RECORD_ID:
      return Long.valueOf(getRecordID());

    case TO_TID:
      return Long.valueOf(getToTid());

    case CID:
      return Long.valueOf(getCid());

    case TITLE:
      return getTitle();

    case URL:
      return getUrl();

    case DURATION:
      return Double.valueOf(getDuration());

    case C_NAME:
      return getCName();

    case M_URL:
      return getMUrl();

    case USER_SOURCE:
      return Integer.valueOf(getUserSource());

    case WT_IMAGE_PATH:
      return getWtImagePath();

    case TO_IMAGE:
      return getToImage();

    case UPLOAD_SOURCE:
      return Integer.valueOf(getUploadSource());

    case WAVEFORM:
      return getWaveform();

    case ALBUM_ID:
      return Long.valueOf(getAlbumID());

    case ALBUM_NAME:
      return getAlbumName();

    case TO_FEEDID:
      return Long.valueOf(getToFeedid());

    case TO_UID:
      return Long.valueOf(getToUid());

    case TO_NICK_NAME:
      return getToNickName();

    case TRANSMIT_CREATED_AT:
      return Long.valueOf(getTransmitCreatedAt());

    case CONTENT:
      return getContent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UID:
      return isSetUid();
    case CREATED_AT:
      return isSetCreatedAt();
    case NICK_NAME:
      return isSetNickName();
    case TYPE:
      return isSetType();
    case IMAGE_PATH:
      return isSetImagePath();
    case RECORD_ID:
      return isSetRecordID();
    case TO_TID:
      return isSetToTid();
    case CID:
      return isSetCid();
    case TITLE:
      return isSetTitle();
    case URL:
      return isSetUrl();
    case DURATION:
      return isSetDuration();
    case C_NAME:
      return isSetCName();
    case M_URL:
      return isSetMUrl();
    case USER_SOURCE:
      return isSetUserSource();
    case WT_IMAGE_PATH:
      return isSetWtImagePath();
    case TO_IMAGE:
      return isSetToImage();
    case UPLOAD_SOURCE:
      return isSetUploadSource();
    case WAVEFORM:
      return isSetWaveform();
    case ALBUM_ID:
      return isSetAlbumID();
    case ALBUM_NAME:
      return isSetAlbumName();
    case TO_FEEDID:
      return isSetToFeedid();
    case TO_UID:
      return isSetToUid();
    case TO_NICK_NAME:
      return isSetToNickName();
    case TRANSMIT_CREATED_AT:
      return isSetTransmitCreatedAt();
    case CONTENT:
      return isSetContent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InnerFeed)
      return this.equals((InnerFeed)that);
    return false;
  }

  public boolean equals(InnerFeed that) {
    if (that == null)
      return false;

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_createdAt = true;
    boolean that_present_createdAt = true;
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (this.createdAt != that.createdAt)
        return false;
    }

    boolean this_present_nickName = true && this.isSetNickName();
    boolean that_present_nickName = true && that.isSetNickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_imagePath = true && this.isSetImagePath();
    boolean that_present_imagePath = true && that.isSetImagePath();
    if (this_present_imagePath || that_present_imagePath) {
      if (!(this_present_imagePath && that_present_imagePath))
        return false;
      if (!this.imagePath.equals(that.imagePath))
        return false;
    }

    boolean this_present_recordID = true;
    boolean that_present_recordID = true;
    if (this_present_recordID || that_present_recordID) {
      if (!(this_present_recordID && that_present_recordID))
        return false;
      if (this.recordID != that.recordID)
        return false;
    }

    boolean this_present_toTid = true;
    boolean that_present_toTid = true;
    if (this_present_toTid || that_present_toTid) {
      if (!(this_present_toTid && that_present_toTid))
        return false;
      if (this.toTid != that.toTid)
        return false;
    }

    boolean this_present_cid = true && this.isSetCid();
    boolean that_present_cid = true && that.isSetCid();
    if (this_present_cid || that_present_cid) {
      if (!(this_present_cid && that_present_cid))
        return false;
      if (this.cid != that.cid)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_duration = true;
    boolean that_present_duration = true;
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    boolean this_present_cName = true && this.isSetCName();
    boolean that_present_cName = true && that.isSetCName();
    if (this_present_cName || that_present_cName) {
      if (!(this_present_cName && that_present_cName))
        return false;
      if (!this.cName.equals(that.cName))
        return false;
    }

    boolean this_present_mUrl = true && this.isSetMUrl();
    boolean that_present_mUrl = true && that.isSetMUrl();
    if (this_present_mUrl || that_present_mUrl) {
      if (!(this_present_mUrl && that_present_mUrl))
        return false;
      if (!this.mUrl.equals(that.mUrl))
        return false;
    }

    boolean this_present_userSource = true && this.isSetUserSource();
    boolean that_present_userSource = true && that.isSetUserSource();
    if (this_present_userSource || that_present_userSource) {
      if (!(this_present_userSource && that_present_userSource))
        return false;
      if (this.userSource != that.userSource)
        return false;
    }

    boolean this_present_wtImagePath = true && this.isSetWtImagePath();
    boolean that_present_wtImagePath = true && that.isSetWtImagePath();
    if (this_present_wtImagePath || that_present_wtImagePath) {
      if (!(this_present_wtImagePath && that_present_wtImagePath))
        return false;
      if (!this.wtImagePath.equals(that.wtImagePath))
        return false;
    }

    boolean this_present_toImage = true && this.isSetToImage();
    boolean that_present_toImage = true && that.isSetToImage();
    if (this_present_toImage || that_present_toImage) {
      if (!(this_present_toImage && that_present_toImage))
        return false;
      if (!this.toImage.equals(that.toImage))
        return false;
    }

    boolean this_present_uploadSource = true && this.isSetUploadSource();
    boolean that_present_uploadSource = true && that.isSetUploadSource();
    if (this_present_uploadSource || that_present_uploadSource) {
      if (!(this_present_uploadSource && that_present_uploadSource))
        return false;
      if (this.uploadSource != that.uploadSource)
        return false;
    }

    boolean this_present_waveform = true && this.isSetWaveform();
    boolean that_present_waveform = true && that.isSetWaveform();
    if (this_present_waveform || that_present_waveform) {
      if (!(this_present_waveform && that_present_waveform))
        return false;
      if (!this.waveform.equals(that.waveform))
        return false;
    }

    boolean this_present_albumID = true && this.isSetAlbumID();
    boolean that_present_albumID = true && that.isSetAlbumID();
    if (this_present_albumID || that_present_albumID) {
      if (!(this_present_albumID && that_present_albumID))
        return false;
      if (this.albumID != that.albumID)
        return false;
    }

    boolean this_present_albumName = true && this.isSetAlbumName();
    boolean that_present_albumName = true && that.isSetAlbumName();
    if (this_present_albumName || that_present_albumName) {
      if (!(this_present_albumName && that_present_albumName))
        return false;
      if (!this.albumName.equals(that.albumName))
        return false;
    }

    boolean this_present_toFeedid = true && this.isSetToFeedid();
    boolean that_present_toFeedid = true && that.isSetToFeedid();
    if (this_present_toFeedid || that_present_toFeedid) {
      if (!(this_present_toFeedid && that_present_toFeedid))
        return false;
      if (this.toFeedid != that.toFeedid)
        return false;
    }

    boolean this_present_toUid = true && this.isSetToUid();
    boolean that_present_toUid = true && that.isSetToUid();
    if (this_present_toUid || that_present_toUid) {
      if (!(this_present_toUid && that_present_toUid))
        return false;
      if (this.toUid != that.toUid)
        return false;
    }

    boolean this_present_toNickName = true && this.isSetToNickName();
    boolean that_present_toNickName = true && that.isSetToNickName();
    if (this_present_toNickName || that_present_toNickName) {
      if (!(this_present_toNickName && that_present_toNickName))
        return false;
      if (!this.toNickName.equals(that.toNickName))
        return false;
    }

    boolean this_present_transmitCreatedAt = true && this.isSetTransmitCreatedAt();
    boolean that_present_transmitCreatedAt = true && that.isSetTransmitCreatedAt();
    if (this_present_transmitCreatedAt || that_present_transmitCreatedAt) {
      if (!(this_present_transmitCreatedAt && that_present_transmitCreatedAt))
        return false;
      if (this.transmitCreatedAt != that.transmitCreatedAt)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(InnerFeed other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    InnerFeed typedOther = (InnerFeed)other;

    lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(typedOther.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, typedOther.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickName()).compareTo(typedOther.isSetNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, typedOther.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImagePath()).compareTo(typedOther.isSetImagePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImagePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imagePath, typedOther.imagePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordID()).compareTo(typedOther.isSetRecordID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordID, typedOther.recordID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToTid()).compareTo(typedOther.isSetToTid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToTid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toTid, typedOther.toTid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCid()).compareTo(typedOther.isSetCid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cid, typedOther.cid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(typedOther.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, typedOther.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCName()).compareTo(typedOther.isSetCName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cName, typedOther.cName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMUrl()).compareTo(typedOther.isSetMUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mUrl, typedOther.mUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserSource()).compareTo(typedOther.isSetUserSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userSource, typedOther.userSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWtImagePath()).compareTo(typedOther.isSetWtImagePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWtImagePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wtImagePath, typedOther.wtImagePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToImage()).compareTo(typedOther.isSetToImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toImage, typedOther.toImage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadSource()).compareTo(typedOther.isSetUploadSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadSource, typedOther.uploadSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWaveform()).compareTo(typedOther.isSetWaveform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWaveform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.waveform, typedOther.waveform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlbumID()).compareTo(typedOther.isSetAlbumID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlbumID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.albumID, typedOther.albumID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlbumName()).compareTo(typedOther.isSetAlbumName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlbumName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.albumName, typedOther.albumName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToFeedid()).compareTo(typedOther.isSetToFeedid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToFeedid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toFeedid, typedOther.toFeedid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToUid()).compareTo(typedOther.isSetToUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toUid, typedOther.toUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToNickName()).compareTo(typedOther.isSetToNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toNickName, typedOther.toNickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransmitCreatedAt()).compareTo(typedOther.isSetTransmitCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransmitCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transmitCreatedAt, typedOther.transmitCreatedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InnerFeed(");
    boolean first = true;

    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    sb.append(this.createdAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nickName:");
    if (this.nickName == null) {
      sb.append("null");
    } else {
      sb.append(this.nickName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetImagePath()) {
      if (!first) sb.append(", ");
      sb.append("imagePath:");
      if (this.imagePath == null) {
        sb.append("null");
      } else {
        sb.append(this.imagePath);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("recordID:");
    sb.append(this.recordID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("toTid:");
    sb.append(this.toTid);
    first = false;
    if (isSetCid()) {
      if (!first) sb.append(", ");
      sb.append("cid:");
      sb.append(this.cid);
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("duration:");
    sb.append(this.duration);
    first = false;
    if (isSetCName()) {
      if (!first) sb.append(", ");
      sb.append("cName:");
      if (this.cName == null) {
        sb.append("null");
      } else {
        sb.append(this.cName);
      }
      first = false;
    }
    if (isSetMUrl()) {
      if (!first) sb.append(", ");
      sb.append("mUrl:");
      if (this.mUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.mUrl);
      }
      first = false;
    }
    if (isSetUserSource()) {
      if (!first) sb.append(", ");
      sb.append("userSource:");
      sb.append(this.userSource);
      first = false;
    }
    if (isSetWtImagePath()) {
      if (!first) sb.append(", ");
      sb.append("wtImagePath:");
      if (this.wtImagePath == null) {
        sb.append("null");
      } else {
        sb.append(this.wtImagePath);
      }
      first = false;
    }
    if (isSetToImage()) {
      if (!first) sb.append(", ");
      sb.append("toImage:");
      if (this.toImage == null) {
        sb.append("null");
      } else {
        sb.append(this.toImage);
      }
      first = false;
    }
    if (isSetUploadSource()) {
      if (!first) sb.append(", ");
      sb.append("uploadSource:");
      sb.append(this.uploadSource);
      first = false;
    }
    if (isSetWaveform()) {
      if (!first) sb.append(", ");
      sb.append("waveform:");
      if (this.waveform == null) {
        sb.append("null");
      } else {
        sb.append(this.waveform);
      }
      first = false;
    }
    if (isSetAlbumID()) {
      if (!first) sb.append(", ");
      sb.append("albumID:");
      sb.append(this.albumID);
      first = false;
    }
    if (isSetAlbumName()) {
      if (!first) sb.append(", ");
      sb.append("albumName:");
      if (this.albumName == null) {
        sb.append("null");
      } else {
        sb.append(this.albumName);
      }
      first = false;
    }
    if (isSetToFeedid()) {
      if (!first) sb.append(", ");
      sb.append("toFeedid:");
      sb.append(this.toFeedid);
      first = false;
    }
    if (isSetToUid()) {
      if (!first) sb.append(", ");
      sb.append("toUid:");
      sb.append(this.toUid);
      first = false;
    }
    if (isSetToNickName()) {
      if (!first) sb.append(", ");
      sb.append("toNickName:");
      if (this.toNickName == null) {
        sb.append("null");
      } else {
        sb.append(this.toNickName);
      }
      first = false;
    }
    if (isSetTransmitCreatedAt()) {
      if (!first) sb.append(", ");
      sb.append("transmitCreatedAt:");
      sb.append(this.transmitCreatedAt);
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'uid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'createdAt' because it's a primitive and you chose the non-beans generator.
    if (nickName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nickName' was not present! Struct: " + toString());
    }
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'recordID' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'toTid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'duration' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InnerFeedStandardSchemeFactory implements SchemeFactory {
    public InnerFeedStandardScheme getScheme() {
      return new InnerFeedStandardScheme();
    }
  }

  private static class InnerFeedStandardScheme extends StandardScheme<InnerFeed> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InnerFeed struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uid = iprot.readI64();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdAt = iprot.readI64();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.setNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IMAGE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imagePath = iprot.readString();
              struct.setImagePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECORD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.recordID = iprot.readI64();
              struct.setRecordIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TO_TID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.toTid = iprot.readI64();
              struct.setToTidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cid = iprot.readI64();
              struct.setCidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.duration = iprot.readDouble();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // C_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cName = iprot.readString();
              struct.setCNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // M_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mUrl = iprot.readString();
              struct.setMUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // USER_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userSource = iprot.readI32();
              struct.setUserSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WT_IMAGE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wtImagePath = iprot.readString();
              struct.setWtImagePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TO_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toImage = iprot.readString();
              struct.setToImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // UPLOAD_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uploadSource = iprot.readI32();
              struct.setUploadSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // WAVEFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.waveform = iprot.readString();
              struct.setWaveformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ALBUM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.albumID = iprot.readI64();
              struct.setAlbumIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ALBUM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.albumName = iprot.readString();
              struct.setAlbumNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // TO_FEEDID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.toFeedid = iprot.readI64();
              struct.setToFeedidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TO_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.toUid = iprot.readI64();
              struct.setToUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // TO_NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toNickName = iprot.readString();
              struct.setToNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TRANSMIT_CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.transmitCreatedAt = iprot.readI64();
              struct.setTransmitCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'uid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCreatedAt()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'createdAt' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRecordID()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'recordID' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetToTid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'toTid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDuration()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'duration' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InnerFeed struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI64(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
      oprot.writeI64(struct.createdAt);
      oprot.writeFieldEnd();
      if (struct.nickName != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(struct.nickName);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.imagePath != null) {
        if (struct.isSetImagePath()) {
          oprot.writeFieldBegin(IMAGE_PATH_FIELD_DESC);
          oprot.writeString(struct.imagePath);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(RECORD_ID_FIELD_DESC);
      oprot.writeI64(struct.recordID);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TO_TID_FIELD_DESC);
      oprot.writeI64(struct.toTid);
      oprot.writeFieldEnd();
      if (struct.isSetCid()) {
        oprot.writeFieldBegin(CID_FIELD_DESC);
        oprot.writeI64(struct.cid);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(DURATION_FIELD_DESC);
      oprot.writeDouble(struct.duration);
      oprot.writeFieldEnd();
      if (struct.cName != null) {
        if (struct.isSetCName()) {
          oprot.writeFieldBegin(C_NAME_FIELD_DESC);
          oprot.writeString(struct.cName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mUrl != null) {
        if (struct.isSetMUrl()) {
          oprot.writeFieldBegin(M_URL_FIELD_DESC);
          oprot.writeString(struct.mUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUserSource()) {
        oprot.writeFieldBegin(USER_SOURCE_FIELD_DESC);
        oprot.writeI32(struct.userSource);
        oprot.writeFieldEnd();
      }
      if (struct.wtImagePath != null) {
        if (struct.isSetWtImagePath()) {
          oprot.writeFieldBegin(WT_IMAGE_PATH_FIELD_DESC);
          oprot.writeString(struct.wtImagePath);
          oprot.writeFieldEnd();
        }
      }
      if (struct.toImage != null) {
        if (struct.isSetToImage()) {
          oprot.writeFieldBegin(TO_IMAGE_FIELD_DESC);
          oprot.writeString(struct.toImage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetUploadSource()) {
        oprot.writeFieldBegin(UPLOAD_SOURCE_FIELD_DESC);
        oprot.writeI32(struct.uploadSource);
        oprot.writeFieldEnd();
      }
      if (struct.waveform != null) {
        if (struct.isSetWaveform()) {
          oprot.writeFieldBegin(WAVEFORM_FIELD_DESC);
          oprot.writeString(struct.waveform);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAlbumID()) {
        oprot.writeFieldBegin(ALBUM_ID_FIELD_DESC);
        oprot.writeI64(struct.albumID);
        oprot.writeFieldEnd();
      }
      if (struct.albumName != null) {
        if (struct.isSetAlbumName()) {
          oprot.writeFieldBegin(ALBUM_NAME_FIELD_DESC);
          oprot.writeString(struct.albumName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetToFeedid()) {
        oprot.writeFieldBegin(TO_FEEDID_FIELD_DESC);
        oprot.writeI64(struct.toFeedid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetToUid()) {
        oprot.writeFieldBegin(TO_UID_FIELD_DESC);
        oprot.writeI64(struct.toUid);
        oprot.writeFieldEnd();
      }
      if (struct.toNickName != null) {
        if (struct.isSetToNickName()) {
          oprot.writeFieldBegin(TO_NICK_NAME_FIELD_DESC);
          oprot.writeString(struct.toNickName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTransmitCreatedAt()) {
        oprot.writeFieldBegin(TRANSMIT_CREATED_AT_FIELD_DESC);
        oprot.writeI64(struct.transmitCreatedAt);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InnerFeedTupleSchemeFactory implements SchemeFactory {
    public InnerFeedTupleScheme getScheme() {
      return new InnerFeedTupleScheme();
    }
  }

  private static class InnerFeedTupleScheme extends TupleScheme<InnerFeed> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InnerFeed struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.uid);
      oprot.writeI64(struct.createdAt);
      oprot.writeString(struct.nickName);
      oprot.writeString(struct.type);
      oprot.writeI64(struct.recordID);
      oprot.writeI64(struct.toTid);
      oprot.writeDouble(struct.duration);
      BitSet optionals = new BitSet();
      if (struct.isSetImagePath()) {
        optionals.set(0);
      }
      if (struct.isSetCid()) {
        optionals.set(1);
      }
      if (struct.isSetTitle()) {
        optionals.set(2);
      }
      if (struct.isSetUrl()) {
        optionals.set(3);
      }
      if (struct.isSetCName()) {
        optionals.set(4);
      }
      if (struct.isSetMUrl()) {
        optionals.set(5);
      }
      if (struct.isSetUserSource()) {
        optionals.set(6);
      }
      if (struct.isSetWtImagePath()) {
        optionals.set(7);
      }
      if (struct.isSetToImage()) {
        optionals.set(8);
      }
      if (struct.isSetUploadSource()) {
        optionals.set(9);
      }
      if (struct.isSetWaveform()) {
        optionals.set(10);
      }
      if (struct.isSetAlbumID()) {
        optionals.set(11);
      }
      if (struct.isSetAlbumName()) {
        optionals.set(12);
      }
      if (struct.isSetToFeedid()) {
        optionals.set(13);
      }
      if (struct.isSetToUid()) {
        optionals.set(14);
      }
      if (struct.isSetToNickName()) {
        optionals.set(15);
      }
      if (struct.isSetTransmitCreatedAt()) {
        optionals.set(16);
      }
      if (struct.isSetContent()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetImagePath()) {
        oprot.writeString(struct.imagePath);
      }
      if (struct.isSetCid()) {
        oprot.writeI64(struct.cid);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetCName()) {
        oprot.writeString(struct.cName);
      }
      if (struct.isSetMUrl()) {
        oprot.writeString(struct.mUrl);
      }
      if (struct.isSetUserSource()) {
        oprot.writeI32(struct.userSource);
      }
      if (struct.isSetWtImagePath()) {
        oprot.writeString(struct.wtImagePath);
      }
      if (struct.isSetToImage()) {
        oprot.writeString(struct.toImage);
      }
      if (struct.isSetUploadSource()) {
        oprot.writeI32(struct.uploadSource);
      }
      if (struct.isSetWaveform()) {
        oprot.writeString(struct.waveform);
      }
      if (struct.isSetAlbumID()) {
        oprot.writeI64(struct.albumID);
      }
      if (struct.isSetAlbumName()) {
        oprot.writeString(struct.albumName);
      }
      if (struct.isSetToFeedid()) {
        oprot.writeI64(struct.toFeedid);
      }
      if (struct.isSetToUid()) {
        oprot.writeI64(struct.toUid);
      }
      if (struct.isSetToNickName()) {
        oprot.writeString(struct.toNickName);
      }
      if (struct.isSetTransmitCreatedAt()) {
        oprot.writeI64(struct.transmitCreatedAt);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InnerFeed struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.uid = iprot.readI64();
      struct.setUidIsSet(true);
      struct.createdAt = iprot.readI64();
      struct.setCreatedAtIsSet(true);
      struct.nickName = iprot.readString();
      struct.setNickNameIsSet(true);
      struct.type = iprot.readString();
      struct.setTypeIsSet(true);
      struct.recordID = iprot.readI64();
      struct.setRecordIDIsSet(true);
      struct.toTid = iprot.readI64();
      struct.setToTidIsSet(true);
      struct.duration = iprot.readDouble();
      struct.setDurationIsSet(true);
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.imagePath = iprot.readString();
        struct.setImagePathIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cid = iprot.readI64();
        struct.setCidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cName = iprot.readString();
        struct.setCNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mUrl = iprot.readString();
        struct.setMUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userSource = iprot.readI32();
        struct.setUserSourceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.wtImagePath = iprot.readString();
        struct.setWtImagePathIsSet(true);
      }
      if (incoming.get(8)) {
        struct.toImage = iprot.readString();
        struct.setToImageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.uploadSource = iprot.readI32();
        struct.setUploadSourceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.waveform = iprot.readString();
        struct.setWaveformIsSet(true);
      }
      if (incoming.get(11)) {
        struct.albumID = iprot.readI64();
        struct.setAlbumIDIsSet(true);
      }
      if (incoming.get(12)) {
        struct.albumName = iprot.readString();
        struct.setAlbumNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.toFeedid = iprot.readI64();
        struct.setToFeedidIsSet(true);
      }
      if (incoming.get(14)) {
        struct.toUid = iprot.readI64();
        struct.setToUidIsSet(true);
      }
      if (incoming.get(15)) {
        struct.toNickName = iprot.readString();
        struct.setToNickNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.transmitCreatedAt = iprot.readI64();
        struct.setTransmitCreatedAtIsSet(true);
      }
      if (incoming.get(17)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
    }
  }

}

