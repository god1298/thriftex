/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ximalaya.thrift.server.spring.test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class Feed implements org.apache.thrift.TBase<Feed, Feed._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Feed");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIME_LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeLine", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField DATAS_FIELD_DESC = new org.apache.thrift.protocol.TField("datas", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FeedStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FeedTupleSchemeFactory());
  }

  public String id; // required
  public double timeLine; // required
  public List<InnerFeed> datas; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TIME_LINE((short)2, "timeLine"),
    DATAS((short)3, "datas");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TIME_LINE
          return TIME_LINE;
        case 3: // DATAS
          return DATAS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMELINE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_LINE, new org.apache.thrift.meta_data.FieldMetaData("timeLine", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DATAS, new org.apache.thrift.meta_data.FieldMetaData("datas", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InnerFeed.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Feed.class, metaDataMap);
  }

  public Feed() {
  }

  public Feed(
    String id,
    double timeLine,
    List<InnerFeed> datas)
  {
    this();
    this.id = id;
    this.timeLine = timeLine;
    setTimeLineIsSet(true);
    this.datas = datas;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Feed(Feed other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.timeLine = other.timeLine;
    if (other.isSetDatas()) {
      List<InnerFeed> __this__datas = new ArrayList<InnerFeed>();
      for (InnerFeed other_element : other.datas) {
        __this__datas.add(new InnerFeed(other_element));
      }
      this.datas = __this__datas;
    }
  }

  public Feed deepCopy() {
    return new Feed(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setTimeLineIsSet(false);
    this.timeLine = 0.0;
    this.datas = null;
  }

  public String getId() {
    return this.id;
  }

  public Feed setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public double getTimeLine() {
    return this.timeLine;
  }

  public Feed setTimeLine(double timeLine) {
    this.timeLine = timeLine;
    setTimeLineIsSet(true);
    return this;
  }

  public void unsetTimeLine() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMELINE_ISSET_ID);
  }

  /** Returns true if field timeLine is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeLine() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMELINE_ISSET_ID);
  }

  public void setTimeLineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMELINE_ISSET_ID, value);
  }

  public int getDatasSize() {
    return (this.datas == null) ? 0 : this.datas.size();
  }

  public java.util.Iterator<InnerFeed> getDatasIterator() {
    return (this.datas == null) ? null : this.datas.iterator();
  }

  public void addToDatas(InnerFeed elem) {
    if (this.datas == null) {
      this.datas = new ArrayList<InnerFeed>();
    }
    this.datas.add(elem);
  }

  public List<InnerFeed> getDatas() {
    return this.datas;
  }

  public Feed setDatas(List<InnerFeed> datas) {
    this.datas = datas;
    return this;
  }

  public void unsetDatas() {
    this.datas = null;
  }

  /** Returns true if field datas is set (has been assigned a value) and false otherwise */
  public boolean isSetDatas() {
    return this.datas != null;
  }

  public void setDatasIsSet(boolean value) {
    if (!value) {
      this.datas = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TIME_LINE:
      if (value == null) {
        unsetTimeLine();
      } else {
        setTimeLine((Double)value);
      }
      break;

    case DATAS:
      if (value == null) {
        unsetDatas();
      } else {
        setDatas((List<InnerFeed>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TIME_LINE:
      return Double.valueOf(getTimeLine());

    case DATAS:
      return getDatas();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TIME_LINE:
      return isSetTimeLine();
    case DATAS:
      return isSetDatas();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Feed)
      return this.equals((Feed)that);
    return false;
  }

  public boolean equals(Feed that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_timeLine = true;
    boolean that_present_timeLine = true;
    if (this_present_timeLine || that_present_timeLine) {
      if (!(this_present_timeLine && that_present_timeLine))
        return false;
      if (this.timeLine != that.timeLine)
        return false;
    }

    boolean this_present_datas = true && this.isSetDatas();
    boolean that_present_datas = true && that.isSetDatas();
    if (this_present_datas || that_present_datas) {
      if (!(this_present_datas && that_present_datas))
        return false;
      if (!this.datas.equals(that.datas))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Feed other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Feed typedOther = (Feed)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeLine()).compareTo(typedOther.isSetTimeLine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeLine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeLine, typedOther.timeLine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatas()).compareTo(typedOther.isSetDatas());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatas()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datas, typedOther.datas);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Feed(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeLine:");
    sb.append(this.timeLine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("datas:");
    if (this.datas == null) {
      sb.append("null");
    } else {
      sb.append(this.datas);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'timeLine' because it's a primitive and you chose the non-beans generator.
    if (datas == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'datas' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FeedStandardSchemeFactory implements SchemeFactory {
    public FeedStandardScheme getScheme() {
      return new FeedStandardScheme();
    }
  }

  private static class FeedStandardScheme extends StandardScheme<Feed> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Feed struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIME_LINE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.timeLine = iprot.readDouble();
              struct.setTimeLineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATAS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.datas = new ArrayList<InnerFeed>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  InnerFeed _elem2; // required
                  _elem2 = new InnerFeed();
                  _elem2.read(iprot);
                  struct.datas.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setDatasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTimeLine()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeLine' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Feed struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_LINE_FIELD_DESC);
      oprot.writeDouble(struct.timeLine);
      oprot.writeFieldEnd();
      if (struct.datas != null) {
        oprot.writeFieldBegin(DATAS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.datas.size()));
          for (InnerFeed _iter3 : struct.datas)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FeedTupleSchemeFactory implements SchemeFactory {
    public FeedTupleScheme getScheme() {
      return new FeedTupleScheme();
    }
  }

  private static class FeedTupleScheme extends TupleScheme<Feed> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Feed struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      oprot.writeDouble(struct.timeLine);
      {
        oprot.writeI32(struct.datas.size());
        for (InnerFeed _iter4 : struct.datas)
        {
          _iter4.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Feed struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      struct.timeLine = iprot.readDouble();
      struct.setTimeLineIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.datas = new ArrayList<InnerFeed>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          InnerFeed _elem7; // required
          _elem7 = new InnerFeed();
          _elem7.read(iprot);
          struct.datas.add(_elem7);
        }
      }
      struct.setDatasIsSet(true);
    }
  }

}

