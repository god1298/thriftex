/**
 * Autogenerated by Thrift Compiler (0.9.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * 
 * @generated
 */
package com.ximalaya.thrift.server.spring.test;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TestService {
    public interface Iface {
        public FeedResult testGetFeedResults(long uid) throws org.apache.thrift.TException;

        public String testGetString(long uid) throws org.apache.thrift.TException;

        public List<String> testGetStrings(long uid) throws org.apache.thrift.TException;

        public List<Integer> testGetInt(long uid) throws org.apache.thrift.TException;

        public List<Long> testGetLong(long uid) throws org.apache.thrift.TException;

        public List<Double> testGetDouble(long uid) throws org.apache.thrift.TException;
    }

    public interface AsyncIface {
        public void testGetFeedResults(
            long uid,
            org.apache.thrift.async.AsyncMethodCallback<AsyncClient.testGetFeedResults_call> resultHandler)
            throws org.apache.thrift.TException;

        public void testGetString(
            long uid,
            org.apache.thrift.async.AsyncMethodCallback<AsyncClient.testGetString_call> resultHandler)
            throws org.apache.thrift.TException;

        public void testGetStrings(
            long uid,
            org.apache.thrift.async.AsyncMethodCallback<AsyncClient.testGetStrings_call> resultHandler)
            throws org.apache.thrift.TException;

        public void testGetInt(long uid,
            org.apache.thrift.async.AsyncMethodCallback<AsyncClient.testGetInt_call> resultHandler)
            throws org.apache.thrift.TException;

        public void testGetLong(long uid,
            org.apache.thrift.async.AsyncMethodCallback<AsyncClient.testGetLong_call> resultHandler)
            throws org.apache.thrift.TException;

        public void testGetDouble(
            long uid,
            org.apache.thrift.async.AsyncMethodCallback<AsyncClient.testGetDouble_call> resultHandler)
            throws org.apache.thrift.TException;
    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
                org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot,
            org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public FeedResult testGetFeedResults(long uid) throws org.apache.thrift.TException {
            send_testGetFeedResults(uid);
            return recv_testGetFeedResults();
        }

        public void send_testGetFeedResults(long uid) throws org.apache.thrift.TException {
            testGetFeedResults_args args = new testGetFeedResults_args();
            args.setUid(uid);
            sendBase("testGetFeedResults", args);
        }

        public FeedResult recv_testGetFeedResults() throws org.apache.thrift.TException {
            testGetFeedResults_result result = new testGetFeedResults_result();
            receiveBase(result, "testGetFeedResults");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "testGetFeedResults failed: unknown result");
        }

        public String testGetString(long uid) throws org.apache.thrift.TException {
            send_testGetString(uid);
            return recv_testGetString();
        }

        public void send_testGetString(long uid) throws org.apache.thrift.TException {
            testGetString_args args = new testGetString_args();
            args.setUid(uid);
            sendBase("testGetString", args);
        }

        public String recv_testGetString() throws org.apache.thrift.TException {
            testGetString_result result = new testGetString_result();
            receiveBase(result, "testGetString");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "testGetString failed: unknown result");
        }

        public List<String> testGetStrings(long uid) throws org.apache.thrift.TException {
            send_testGetStrings(uid);
            return recv_testGetStrings();
        }

        public void send_testGetStrings(long uid) throws org.apache.thrift.TException {
            testGetStrings_args args = new testGetStrings_args();
            args.setUid(uid);
            sendBase("testGetStrings", args);
        }

        public List<String> recv_testGetStrings() throws org.apache.thrift.TException {
            testGetStrings_result result = new testGetStrings_result();
            receiveBase(result, "testGetStrings");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "testGetStrings failed: unknown result");
        }

        public List<Integer> testGetInt(long uid) throws org.apache.thrift.TException {
            send_testGetInt(uid);
            return recv_testGetInt();
        }

        public void send_testGetInt(long uid) throws org.apache.thrift.TException {
            testGetInt_args args = new testGetInt_args();
            args.setUid(uid);
            sendBase("testGetInt", args);
        }

        public List<Integer> recv_testGetInt() throws org.apache.thrift.TException {
            testGetInt_result result = new testGetInt_result();
            receiveBase(result, "testGetInt");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "testGetInt failed: unknown result");
        }

        public List<Long> testGetLong(long uid) throws org.apache.thrift.TException {
            send_testGetLong(uid);
            return recv_testGetLong();
        }

        public void send_testGetLong(long uid) throws org.apache.thrift.TException {
            testGetLong_args args = new testGetLong_args();
            args.setUid(uid);
            sendBase("testGetLong", args);
        }

        public List<Long> recv_testGetLong() throws org.apache.thrift.TException {
            testGetLong_result result = new testGetLong_result();
            receiveBase(result, "testGetLong");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "testGetLong failed: unknown result");
        }

        public List<Double> testGetDouble(long uid) throws org.apache.thrift.TException {
            send_testGetDouble(uid);
            return recv_testGetDouble();
        }

        public void send_testGetDouble(long uid) throws org.apache.thrift.TException {
            testGetDouble_args args = new testGetDouble_args();
            args.setUid(uid);
            sendBase("testGetDouble", args);
        }

        public List<Double> recv_testGetDouble() throws org.apache.thrift.TException {
            testGetDouble_result result = new testGetDouble_result();
            receiveBase(result, "testGetDouble");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "testGetDouble failed: unknown result");
        }
    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements
        AsyncIface {
        public static class Factory implements
            org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(
                org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
            org.apache.thrift.async.TAsyncClientManager clientManager,
            org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void testGetFeedResults(long uid,
            org.apache.thrift.async.AsyncMethodCallback<testGetFeedResults_call> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            testGetFeedResults_call method_call = new testGetFeedResults_call(uid, resultHandler,
                this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class testGetFeedResults_call extends
            org.apache.thrift.async.TAsyncMethodCall {
            private long uid;

            public testGetFeedResults_call(long uid,
                org.apache.thrift.async.AsyncMethodCallback<testGetFeedResults_call> resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.uid = uid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
                    "testGetFeedResults", org.apache.thrift.protocol.TMessageType.CALL, 0));
                testGetFeedResults_args args = new testGetFeedResults_args();
                args.setUid(uid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public FeedResult getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
                    .getProtocol(memoryTransport);
                return (new Client(prot)).recv_testGetFeedResults();
            }
        }

        public void testGetString(long uid,
            org.apache.thrift.async.AsyncMethodCallback<testGetString_call> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            testGetString_call method_call = new testGetString_call(uid, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class testGetString_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long uid;

            public testGetString_call(long uid,
                org.apache.thrift.async.AsyncMethodCallback<testGetString_call> resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.uid = uid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testGetString",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                testGetString_args args = new testGetString_args();
                args.setUid(uid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
                    .getProtocol(memoryTransport);
                return (new Client(prot)).recv_testGetString();
            }
        }

        public void testGetStrings(long uid,
            org.apache.thrift.async.AsyncMethodCallback<testGetStrings_call> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            testGetStrings_call method_call = new testGetStrings_call(uid, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class testGetStrings_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long uid;

            public testGetStrings_call(long uid,
                org.apache.thrift.async.AsyncMethodCallback<testGetStrings_call> resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.uid = uid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testGetStrings",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                testGetStrings_args args = new testGetStrings_args();
                args.setUid(uid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<String> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
                    .getProtocol(memoryTransport);
                return (new Client(prot)).recv_testGetStrings();
            }
        }

        public void testGetInt(long uid,
            org.apache.thrift.async.AsyncMethodCallback<testGetInt_call> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            testGetInt_call method_call = new testGetInt_call(uid, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class testGetInt_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long uid;

            public testGetInt_call(long uid,
                org.apache.thrift.async.AsyncMethodCallback<testGetInt_call> resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.uid = uid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testGetInt",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                testGetInt_args args = new testGetInt_args();
                args.setUid(uid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<Integer> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
                    .getProtocol(memoryTransport);
                return (new Client(prot)).recv_testGetInt();
            }
        }

        public void testGetLong(long uid,
            org.apache.thrift.async.AsyncMethodCallback<testGetLong_call> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            testGetLong_call method_call = new testGetLong_call(uid, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class testGetLong_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long uid;

            public testGetLong_call(long uid,
                org.apache.thrift.async.AsyncMethodCallback<testGetLong_call> resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.uid = uid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testGetLong",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                testGetLong_args args = new testGetLong_args();
                args.setUid(uid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<Long> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
                    .getProtocol(memoryTransport);
                return (new Client(prot)).recv_testGetLong();
            }
        }

        public void testGetDouble(long uid,
            org.apache.thrift.async.AsyncMethodCallback<testGetDouble_call> resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            testGetDouble_call method_call = new testGetDouble_call(uid, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class testGetDouble_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long uid;

            public testGetDouble_call(long uid,
                org.apache.thrift.async.AsyncMethodCallback<testGetDouble_call> resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.uid = uid;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("testGetDouble",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                testGetDouble_args args = new testGetDouble_args();
                args.setUid(uid);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<Double> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
                    .getProtocol(memoryTransport);
                return (new Client(prot)).recv_testGetDouble();
            }
        }
    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
        implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(
                iface,
                getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(
            I iface,
            Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
            Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("testGetFeedResults", new testGetFeedResults());
            processMap.put("testGetString", new testGetString());
            processMap.put("testGetStrings", new testGetStrings());
            processMap.put("testGetInt", new testGetInt());
            processMap.put("testGetLong", new testGetLong());
            processMap.put("testGetDouble", new testGetDouble());
            return processMap;
        }

        public static class testGetFeedResults<I extends Iface> extends
            org.apache.thrift.ProcessFunction<I, testGetFeedResults_args> {
            public testGetFeedResults() {
                super("testGetFeedResults");
            }

            public testGetFeedResults_args getEmptyArgsInstance() {
                return new testGetFeedResults_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testGetFeedResults_result getResult(I iface, testGetFeedResults_args args)
                throws org.apache.thrift.TException {
                testGetFeedResults_result result = new testGetFeedResults_result();
                result.success = iface.testGetFeedResults(args.uid);
                return result;
            }
        }

        public static class testGetString<I extends Iface> extends
            org.apache.thrift.ProcessFunction<I, testGetString_args> {
            public testGetString() {
                super("testGetString");
            }

            public testGetString_args getEmptyArgsInstance() {
                return new testGetString_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testGetString_result getResult(I iface, testGetString_args args)
                throws org.apache.thrift.TException {
                testGetString_result result = new testGetString_result();
                result.success = iface.testGetString(args.uid);
                return result;
            }
        }

        public static class testGetStrings<I extends Iface> extends
            org.apache.thrift.ProcessFunction<I, testGetStrings_args> {
            public testGetStrings() {
                super("testGetStrings");
            }

            public testGetStrings_args getEmptyArgsInstance() {
                return new testGetStrings_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testGetStrings_result getResult(I iface, testGetStrings_args args)
                throws org.apache.thrift.TException {
                testGetStrings_result result = new testGetStrings_result();
                result.success = iface.testGetStrings(args.uid);
                return result;
            }
        }

        public static class testGetInt<I extends Iface> extends
            org.apache.thrift.ProcessFunction<I, testGetInt_args> {
            public testGetInt() {
                super("testGetInt");
            }

            public testGetInt_args getEmptyArgsInstance() {
                return new testGetInt_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testGetInt_result getResult(I iface, testGetInt_args args)
                throws org.apache.thrift.TException {
                testGetInt_result result = new testGetInt_result();
                result.success = iface.testGetInt(args.uid);
                return result;
            }
        }

        public static class testGetLong<I extends Iface> extends
            org.apache.thrift.ProcessFunction<I, testGetLong_args> {
            public testGetLong() {
                super("testGetLong");
            }

            public testGetLong_args getEmptyArgsInstance() {
                return new testGetLong_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testGetLong_result getResult(I iface, testGetLong_args args)
                throws org.apache.thrift.TException {
                testGetLong_result result = new testGetLong_result();
                result.success = iface.testGetLong(args.uid);
                return result;
            }
        }

        public static class testGetDouble<I extends Iface> extends
            org.apache.thrift.ProcessFunction<I, testGetDouble_args> {
            public testGetDouble() {
                super("testGetDouble");
            }

            public testGetDouble_args getEmptyArgsInstance() {
                return new testGetDouble_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public testGetDouble_result getResult(I iface, testGetDouble_args args)
                throws org.apache.thrift.TException {
                testGetDouble_result result = new testGetDouble_result();
                result.success = iface.testGetDouble(args.uid);
                return result;
            }
        }
    }

    public static class testGetFeedResults_args implements
        org.apache.thrift.TBase<testGetFeedResults_args, testGetFeedResults_args._Fields>,
        java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "testGetFeedResults_args");
        private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "uid", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new testGetFeedResults_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new testGetFeedResults_argsTupleSchemeFactory());
        }
        public long uid; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            UID((short) 1, "uid");
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // UID
                        return UID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __UID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
                testGetFeedResults_args.class, metaDataMap);
        }

        public testGetFeedResults_args() {
        }

        public testGetFeedResults_args(long uid) {
            this();
            this.uid = uid;
            setUidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testGetFeedResults_args(testGetFeedResults_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.uid = other.uid;
        }

        public testGetFeedResults_args deepCopy() {
            return new testGetFeedResults_args(this);
        }

        @Override
        public void clear() {
            setUidIsSet(false);
            this.uid = 0;
        }

        public long getUid() {
            return this.uid;
        }

        public testGetFeedResults_args setUid(long uid) {
            this.uid = uid;
            setUidIsSet(true);
            return this;
        }

        public void unsetUid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
        }

        /** Returns true if field uid is set (has been assigned a value) and false otherwise */
        public boolean isSetUid() {
            return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
        }

        public void setUidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case UID:
                    if (value == null) {
                        unsetUid();
                    } else {
                        setUid((Long) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case UID:
                    return Long.valueOf(getUid());
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch (field) {
                case UID:
                    return isSetUid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof testGetFeedResults_args)
                return this.equals((testGetFeedResults_args) that);
            return false;
        }

        public boolean equals(testGetFeedResults_args that) {
            if (that == null)
                return false;
            boolean this_present_uid = true;
            boolean that_present_uid = true;
            if (this_present_uid || that_present_uid) {
                if (!(this_present_uid && that_present_uid))
                    return false;
                if (this.uid != that.uid)
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(testGetFeedResults_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            testGetFeedResults_args typedOther = (testGetFeedResults_args) other;
            lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("testGetFeedResults_args(");
            boolean first = true;
            sb.append("uid:");
            sb.append(this.uid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
            ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class testGetFeedResults_argsStandardSchemeFactory implements SchemeFactory {
            public testGetFeedResults_argsStandardScheme getScheme() {
                return new testGetFeedResults_argsStandardScheme();
            }
        }

        private static class testGetFeedResults_argsStandardScheme extends
            StandardScheme<testGetFeedResults_args> {
            public void read(org.apache.thrift.protocol.TProtocol iprot,
                testGetFeedResults_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // UID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.uid = iprot.readI64();
                                struct.setUidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                testGetFeedResults_args struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(UID_FIELD_DESC);
                oprot.writeI64(struct.uid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class testGetFeedResults_argsTupleSchemeFactory implements SchemeFactory {
            public testGetFeedResults_argsTupleScheme getScheme() {
                return new testGetFeedResults_argsTupleScheme();
            }
        }

        private static class testGetFeedResults_argsTupleScheme extends
            TupleScheme<testGetFeedResults_args> {
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                testGetFeedResults_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUid()) {
                    oprot.writeI64(struct.uid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                testGetFeedResults_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.uid = iprot.readI64();
                    struct.setUidIsSet(true);
                }
            }
        }
    }

    public static class testGetFeedResults_result implements
        org.apache.thrift.TBase<testGetFeedResults_result, testGetFeedResults_result._Fields>,
        java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "testGetFeedResults_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new testGetFeedResults_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new testGetFeedResults_resultTupleSchemeFactory());
        }
        public FeedResult success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, FeedResult.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
                testGetFeedResults_result.class, metaDataMap);
        }

        public testGetFeedResults_result() {
        }

        public testGetFeedResults_result(FeedResult success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testGetFeedResults_result(testGetFeedResults_result other) {
            if (other.isSetSuccess()) {
                this.success = new FeedResult(other.success);
            }
        }

        public testGetFeedResults_result deepCopy() {
            return new testGetFeedResults_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public FeedResult getSuccess() {
            return this.success;
        }

        public testGetFeedResults_result setSuccess(FeedResult success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((FeedResult) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof testGetFeedResults_result)
                return this.equals((testGetFeedResults_result) that);
            return false;
        }

        public boolean equals(testGetFeedResults_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(testGetFeedResults_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            testGetFeedResults_result typedOther = (testGetFeedResults_result) other;
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
                    typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("testGetFeedResults_result(");
            boolean first = true;
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
            ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class testGetFeedResults_resultStandardSchemeFactory implements
            SchemeFactory {
            public testGetFeedResults_resultStandardScheme getScheme() {
                return new testGetFeedResults_resultStandardScheme();
            }
        }

        private static class testGetFeedResults_resultStandardScheme extends
            StandardScheme<testGetFeedResults_result> {
            public void read(org.apache.thrift.protocol.TProtocol iprot,
                testGetFeedResults_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new FeedResult();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                testGetFeedResults_result struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class testGetFeedResults_resultTupleSchemeFactory implements SchemeFactory {
            public testGetFeedResults_resultTupleScheme getScheme() {
                return new testGetFeedResults_resultTupleScheme();
            }
        }

        private static class testGetFeedResults_resultTupleScheme extends
            TupleScheme<testGetFeedResults_result> {
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                testGetFeedResults_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                testGetFeedResults_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new FeedResult();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class testGetString_args implements
        org.apache.thrift.TBase<testGetString_args, testGetString_args._Fields>,
        java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "testGetString_args");
        private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "uid", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new testGetString_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new testGetString_argsTupleSchemeFactory());
        }
        public long uid; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            UID((short) 1, "uid");
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // UID
                        return UID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __UID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
                testGetString_args.class, metaDataMap);
        }

        public testGetString_args() {
        }

        public testGetString_args(long uid) {
            this();
            this.uid = uid;
            setUidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testGetString_args(testGetString_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.uid = other.uid;
        }

        public testGetString_args deepCopy() {
            return new testGetString_args(this);
        }

        @Override
        public void clear() {
            setUidIsSet(false);
            this.uid = 0;
        }

        public long getUid() {
            return this.uid;
        }

        public testGetString_args setUid(long uid) {
            this.uid = uid;
            setUidIsSet(true);
            return this;
        }

        public void unsetUid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
        }

        /** Returns true if field uid is set (has been assigned a value) and false otherwise */
        public boolean isSetUid() {
            return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
        }

        public void setUidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case UID:
                    if (value == null) {
                        unsetUid();
                    } else {
                        setUid((Long) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case UID:
                    return Long.valueOf(getUid());
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch (field) {
                case UID:
                    return isSetUid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof testGetString_args)
                return this.equals((testGetString_args) that);
            return false;
        }

        public boolean equals(testGetString_args that) {
            if (that == null)
                return false;
            boolean this_present_uid = true;
            boolean that_present_uid = true;
            if (this_present_uid || that_present_uid) {
                if (!(this_present_uid && that_present_uid))
                    return false;
                if (this.uid != that.uid)
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(testGetString_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            testGetString_args typedOther = (testGetString_args) other;
            lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("testGetString_args(");
            boolean first = true;
            sb.append("uid:");
            sb.append(this.uid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
            ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class testGetString_argsStandardSchemeFactory implements SchemeFactory {
            public testGetString_argsStandardScheme getScheme() {
                return new testGetString_argsStandardScheme();
            }
        }

        private static class testGetString_argsStandardScheme extends
            StandardScheme<testGetString_args> {
            public void read(org.apache.thrift.protocol.TProtocol iprot, testGetString_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // UID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.uid = iprot.readI64();
                                struct.setUidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testGetString_args struct)
                throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(UID_FIELD_DESC);
                oprot.writeI64(struct.uid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class testGetString_argsTupleSchemeFactory implements SchemeFactory {
            public testGetString_argsTupleScheme getScheme() {
                return new testGetString_argsTupleScheme();
            }
        }

        private static class testGetString_argsTupleScheme extends TupleScheme<testGetString_args> {
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, testGetString_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUid()) {
                    oprot.writeI64(struct.uid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, testGetString_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.uid = iprot.readI64();
                    struct.setUidIsSet(true);
                }
            }
        }
    }

    public static class testGetString_result implements
        org.apache.thrift.TBase<testGetString_result, testGetString_result._Fields>,
        java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "testGetString_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.STRING, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new testGetString_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new testGetString_resultTupleSchemeFactory());
        }
        public String success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
                testGetString_result.class, metaDataMap);
        }

        public testGetString_result() {
        }

        public testGetString_result(String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testGetString_result(testGetString_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        public testGetString_result deepCopy() {
            return new testGetString_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        public testGetString_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((String) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof testGetString_result)
                return this.equals((testGetString_result) that);
            return false;
        }

        public boolean equals(testGetString_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(testGetString_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            testGetString_result typedOther = (testGetString_result) other;
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
                    typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("testGetString_result(");
            boolean first = true;
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
            ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class testGetString_resultStandardSchemeFactory implements SchemeFactory {
            public testGetString_resultStandardScheme getScheme() {
                return new testGetString_resultStandardScheme();
            }
        }

        private static class testGetString_resultStandardScheme extends
            StandardScheme<testGetString_result> {
            public void read(org.apache.thrift.protocol.TProtocol iprot, testGetString_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                testGetString_result struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class testGetString_resultTupleSchemeFactory implements SchemeFactory {
            public testGetString_resultTupleScheme getScheme() {
                return new testGetString_resultTupleScheme();
            }
        }

        private static class testGetString_resultTupleScheme extends
            TupleScheme<testGetString_result> {
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, testGetString_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, testGetString_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class testGetStrings_args implements
        org.apache.thrift.TBase<testGetStrings_args, testGetStrings_args._Fields>,
        java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "testGetStrings_args");
        private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "uid", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new testGetStrings_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new testGetStrings_argsTupleSchemeFactory());
        }
        public long uid; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            UID((short) 1, "uid");
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // UID
                        return UID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __UID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
                testGetStrings_args.class, metaDataMap);
        }

        public testGetStrings_args() {
        }

        public testGetStrings_args(long uid) {
            this();
            this.uid = uid;
            setUidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testGetStrings_args(testGetStrings_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.uid = other.uid;
        }

        public testGetStrings_args deepCopy() {
            return new testGetStrings_args(this);
        }

        @Override
        public void clear() {
            setUidIsSet(false);
            this.uid = 0;
        }

        public long getUid() {
            return this.uid;
        }

        public testGetStrings_args setUid(long uid) {
            this.uid = uid;
            setUidIsSet(true);
            return this;
        }

        public void unsetUid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
        }

        /** Returns true if field uid is set (has been assigned a value) and false otherwise */
        public boolean isSetUid() {
            return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
        }

        public void setUidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case UID:
                    if (value == null) {
                        unsetUid();
                    } else {
                        setUid((Long) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case UID:
                    return Long.valueOf(getUid());
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch (field) {
                case UID:
                    return isSetUid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof testGetStrings_args)
                return this.equals((testGetStrings_args) that);
            return false;
        }

        public boolean equals(testGetStrings_args that) {
            if (that == null)
                return false;
            boolean this_present_uid = true;
            boolean that_present_uid = true;
            if (this_present_uid || that_present_uid) {
                if (!(this_present_uid && that_present_uid))
                    return false;
                if (this.uid != that.uid)
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(testGetStrings_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            testGetStrings_args typedOther = (testGetStrings_args) other;
            lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("testGetStrings_args(");
            boolean first = true;
            sb.append("uid:");
            sb.append(this.uid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
            ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class testGetStrings_argsStandardSchemeFactory implements SchemeFactory {
            public testGetStrings_argsStandardScheme getScheme() {
                return new testGetStrings_argsStandardScheme();
            }
        }

        private static class testGetStrings_argsStandardScheme extends
            StandardScheme<testGetStrings_args> {
            public void read(org.apache.thrift.protocol.TProtocol iprot, testGetStrings_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // UID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.uid = iprot.readI64();
                                struct.setUidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testGetStrings_args struct)
                throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(UID_FIELD_DESC);
                oprot.writeI64(struct.uid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class testGetStrings_argsTupleSchemeFactory implements SchemeFactory {
            public testGetStrings_argsTupleScheme getScheme() {
                return new testGetStrings_argsTupleScheme();
            }
        }

        private static class testGetStrings_argsTupleScheme extends
            TupleScheme<testGetStrings_args> {
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, testGetStrings_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUid()) {
                    oprot.writeI64(struct.uid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, testGetStrings_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.uid = iprot.readI64();
                    struct.setUidIsSet(true);
                }
            }
        }
    }

    public static class testGetStrings_result implements
        org.apache.thrift.TBase<testGetStrings_result, testGetStrings_result._Fields>,
        java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "testGetStrings_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new testGetStrings_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new testGetStrings_resultTupleSchemeFactory());
        }
        public List<String> success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
                testGetStrings_result.class, metaDataMap);
        }

        public testGetStrings_result() {
        }

        public testGetStrings_result(List<String> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testGetStrings_result(testGetStrings_result other) {
            if (other.isSetSuccess()) {
                List<String> __this__success = new ArrayList<String>();
                for (String other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public testGetStrings_result deepCopy() {
            return new testGetStrings_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<String> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(String elem) {
            if (this.success == null) {
                this.success = new ArrayList<String>();
            }
            this.success.add(elem);
        }

        public List<String> getSuccess() {
            return this.success;
        }

        public testGetStrings_result setSuccess(List<String> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<String>) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof testGetStrings_result)
                return this.equals((testGetStrings_result) that);
            return false;
        }

        public boolean equals(testGetStrings_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(testGetStrings_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            testGetStrings_result typedOther = (testGetStrings_result) other;
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
                    typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("testGetStrings_result(");
            boolean first = true;
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
            ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class testGetStrings_resultStandardSchemeFactory implements SchemeFactory {
            public testGetStrings_resultStandardScheme getScheme() {
                return new testGetStrings_resultStandardScheme();
            }
        }

        private static class testGetStrings_resultStandardScheme extends
            StandardScheme<testGetStrings_result> {
            public void read(org.apache.thrift.protocol.TProtocol iprot,
                testGetStrings_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list16 = iprot
                                        .readListBegin();
                                    struct.success = new ArrayList<String>(_list16.size);
                                    for (int _i17 = 0; _i17 < _list16.size; ++_i17) {
                                        String _elem18; // required
                                        _elem18 = iprot.readString();
                                        struct.success.add(_elem18);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                testGetStrings_result struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                            org.apache.thrift.protocol.TType.STRING, struct.success.size()));
                        for (String _iter19 : struct.success) {
                            oprot.writeString(_iter19);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class testGetStrings_resultTupleSchemeFactory implements SchemeFactory {
            public testGetStrings_resultTupleScheme getScheme() {
                return new testGetStrings_resultTupleScheme();
            }
        }

        private static class testGetStrings_resultTupleScheme extends
            TupleScheme<testGetStrings_result> {
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                testGetStrings_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (String _iter20 : struct.success) {
                            oprot.writeString(_iter20);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, testGetStrings_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(
                            org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.success = new ArrayList<String>(_list21.size);
                        for (int _i22 = 0; _i22 < _list21.size; ++_i22) {
                            String _elem23; // required
                            _elem23 = iprot.readString();
                            struct.success.add(_elem23);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class testGetInt_args implements
        org.apache.thrift.TBase<testGetInt_args, testGetInt_args._Fields>, java.io.Serializable,
        Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "testGetInt_args");
        private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "uid", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new testGetInt_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new testGetInt_argsTupleSchemeFactory());
        }
        public long uid; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            UID((short) 1, "uid");
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // UID
                        return UID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __UID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testGetInt_args.class,
                metaDataMap);
        }

        public testGetInt_args() {
        }

        public testGetInt_args(long uid) {
            this();
            this.uid = uid;
            setUidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testGetInt_args(testGetInt_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.uid = other.uid;
        }

        public testGetInt_args deepCopy() {
            return new testGetInt_args(this);
        }

        @Override
        public void clear() {
            setUidIsSet(false);
            this.uid = 0;
        }

        public long getUid() {
            return this.uid;
        }

        public testGetInt_args setUid(long uid) {
            this.uid = uid;
            setUidIsSet(true);
            return this;
        }

        public void unsetUid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
        }

        /** Returns true if field uid is set (has been assigned a value) and false otherwise */
        public boolean isSetUid() {
            return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
        }

        public void setUidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case UID:
                    if (value == null) {
                        unsetUid();
                    } else {
                        setUid((Long) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case UID:
                    return Long.valueOf(getUid());
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch (field) {
                case UID:
                    return isSetUid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof testGetInt_args)
                return this.equals((testGetInt_args) that);
            return false;
        }

        public boolean equals(testGetInt_args that) {
            if (that == null)
                return false;
            boolean this_present_uid = true;
            boolean that_present_uid = true;
            if (this_present_uid || that_present_uid) {
                if (!(this_present_uid && that_present_uid))
                    return false;
                if (this.uid != that.uid)
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(testGetInt_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            testGetInt_args typedOther = (testGetInt_args) other;
            lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("testGetInt_args(");
            boolean first = true;
            sb.append("uid:");
            sb.append(this.uid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
            ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class testGetInt_argsStandardSchemeFactory implements SchemeFactory {
            public testGetInt_argsStandardScheme getScheme() {
                return new testGetInt_argsStandardScheme();
            }
        }

        private static class testGetInt_argsStandardScheme extends StandardScheme<testGetInt_args> {
            public void read(org.apache.thrift.protocol.TProtocol iprot, testGetInt_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // UID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.uid = iprot.readI64();
                                struct.setUidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testGetInt_args struct)
                throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(UID_FIELD_DESC);
                oprot.writeI64(struct.uid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class testGetInt_argsTupleSchemeFactory implements SchemeFactory {
            public testGetInt_argsTupleScheme getScheme() {
                return new testGetInt_argsTupleScheme();
            }
        }

        private static class testGetInt_argsTupleScheme extends TupleScheme<testGetInt_args> {
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, testGetInt_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUid()) {
                    oprot.writeI64(struct.uid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, testGetInt_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.uid = iprot.readI64();
                    struct.setUidIsSet(true);
                }
            }
        }
    }

    public static class testGetInt_result implements
        org.apache.thrift.TBase<testGetInt_result, testGetInt_result._Fields>,
        java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "testGetInt_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new testGetInt_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new testGetInt_resultTupleSchemeFactory());
        }
        public List<Integer> success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.I32))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testGetInt_result.class,
                metaDataMap);
        }

        public testGetInt_result() {
        }

        public testGetInt_result(List<Integer> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testGetInt_result(testGetInt_result other) {
            if (other.isSetSuccess()) {
                List<Integer> __this__success = new ArrayList<Integer>();
                for (Integer other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public testGetInt_result deepCopy() {
            return new testGetInt_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Integer> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(int elem) {
            if (this.success == null) {
                this.success = new ArrayList<Integer>();
            }
            this.success.add(elem);
        }

        public List<Integer> getSuccess() {
            return this.success;
        }

        public testGetInt_result setSuccess(List<Integer> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<Integer>) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof testGetInt_result)
                return this.equals((testGetInt_result) that);
            return false;
        }

        public boolean equals(testGetInt_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(testGetInt_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            testGetInt_result typedOther = (testGetInt_result) other;
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
                    typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("testGetInt_result(");
            boolean first = true;
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
            ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class testGetInt_resultStandardSchemeFactory implements SchemeFactory {
            public testGetInt_resultStandardScheme getScheme() {
                return new testGetInt_resultStandardScheme();
            }
        }

        private static class testGetInt_resultStandardScheme extends
            StandardScheme<testGetInt_result> {
            public void read(org.apache.thrift.protocol.TProtocol iprot, testGetInt_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list24 = iprot
                                        .readListBegin();
                                    struct.success = new ArrayList<Integer>(_list24.size);
                                    for (int _i25 = 0; _i25 < _list24.size; ++_i25) {
                                        int _elem26; // required
                                        _elem26 = iprot.readI32();
                                        struct.success.add(_elem26);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testGetInt_result struct)
                throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                            org.apache.thrift.protocol.TType.I32, struct.success.size()));
                        for (int _iter27 : struct.success) {
                            oprot.writeI32(_iter27);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class testGetInt_resultTupleSchemeFactory implements SchemeFactory {
            public testGetInt_resultTupleScheme getScheme() {
                return new testGetInt_resultTupleScheme();
            }
        }

        private static class testGetInt_resultTupleScheme extends TupleScheme<testGetInt_result> {
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, testGetInt_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (int _iter28 : struct.success) {
                            oprot.writeI32(_iter28);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, testGetInt_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(
                            org.apache.thrift.protocol.TType.I32, iprot.readI32());
                        struct.success = new ArrayList<Integer>(_list29.size);
                        for (int _i30 = 0; _i30 < _list29.size; ++_i30) {
                            int _elem31; // required
                            _elem31 = iprot.readI32();
                            struct.success.add(_elem31);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class testGetLong_args implements
        org.apache.thrift.TBase<testGetLong_args, testGetLong_args._Fields>, java.io.Serializable,
        Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "testGetLong_args");
        private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "uid", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new testGetLong_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new testGetLong_argsTupleSchemeFactory());
        }
        public long uid; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            UID((short) 1, "uid");
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // UID
                        return UID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __UID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(testGetLong_args.class,
                metaDataMap);
        }

        public testGetLong_args() {
        }

        public testGetLong_args(long uid) {
            this();
            this.uid = uid;
            setUidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testGetLong_args(testGetLong_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.uid = other.uid;
        }

        public testGetLong_args deepCopy() {
            return new testGetLong_args(this);
        }

        @Override
        public void clear() {
            setUidIsSet(false);
            this.uid = 0;
        }

        public long getUid() {
            return this.uid;
        }

        public testGetLong_args setUid(long uid) {
            this.uid = uid;
            setUidIsSet(true);
            return this;
        }

        public void unsetUid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
        }

        /** Returns true if field uid is set (has been assigned a value) and false otherwise */
        public boolean isSetUid() {
            return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
        }

        public void setUidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case UID:
                    if (value == null) {
                        unsetUid();
                    } else {
                        setUid((Long) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case UID:
                    return Long.valueOf(getUid());
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch (field) {
                case UID:
                    return isSetUid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof testGetLong_args)
                return this.equals((testGetLong_args) that);
            return false;
        }

        public boolean equals(testGetLong_args that) {
            if (that == null)
                return false;
            boolean this_present_uid = true;
            boolean that_present_uid = true;
            if (this_present_uid || that_present_uid) {
                if (!(this_present_uid && that_present_uid))
                    return false;
                if (this.uid != that.uid)
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(testGetLong_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            testGetLong_args typedOther = (testGetLong_args) other;
            lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("testGetLong_args(");
            boolean first = true;
            sb.append("uid:");
            sb.append(this.uid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
            ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class testGetLong_argsStandardSchemeFactory implements SchemeFactory {
            public testGetLong_argsStandardScheme getScheme() {
                return new testGetLong_argsStandardScheme();
            }
        }

        private static class testGetLong_argsStandardScheme extends
            StandardScheme<testGetLong_args> {
            public void read(org.apache.thrift.protocol.TProtocol iprot, testGetLong_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // UID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.uid = iprot.readI64();
                                struct.setUidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testGetLong_args struct)
                throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(UID_FIELD_DESC);
                oprot.writeI64(struct.uid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class testGetLong_argsTupleSchemeFactory implements SchemeFactory {
            public testGetLong_argsTupleScheme getScheme() {
                return new testGetLong_argsTupleScheme();
            }
        }

        private static class testGetLong_argsTupleScheme extends TupleScheme<testGetLong_args> {
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, testGetLong_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUid()) {
                    oprot.writeI64(struct.uid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, testGetLong_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.uid = iprot.readI64();
                    struct.setUidIsSet(true);
                }
            }
        }
    }

    public static class testGetLong_result implements
        org.apache.thrift.TBase<testGetLong_result, testGetLong_result._Fields>,
        java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "testGetLong_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new testGetLong_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new testGetLong_resultTupleSchemeFactory());
        }
        public List<Long> success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.I64))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
                testGetLong_result.class, metaDataMap);
        }

        public testGetLong_result() {
        }

        public testGetLong_result(List<Long> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testGetLong_result(testGetLong_result other) {
            if (other.isSetSuccess()) {
                List<Long> __this__success = new ArrayList<Long>();
                for (Long other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public testGetLong_result deepCopy() {
            return new testGetLong_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Long> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(long elem) {
            if (this.success == null) {
                this.success = new ArrayList<Long>();
            }
            this.success.add(elem);
        }

        public List<Long> getSuccess() {
            return this.success;
        }

        public testGetLong_result setSuccess(List<Long> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<Long>) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof testGetLong_result)
                return this.equals((testGetLong_result) that);
            return false;
        }

        public boolean equals(testGetLong_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(testGetLong_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            testGetLong_result typedOther = (testGetLong_result) other;
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
                    typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("testGetLong_result(");
            boolean first = true;
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
            ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class testGetLong_resultStandardSchemeFactory implements SchemeFactory {
            public testGetLong_resultStandardScheme getScheme() {
                return new testGetLong_resultStandardScheme();
            }
        }

        private static class testGetLong_resultStandardScheme extends
            StandardScheme<testGetLong_result> {
            public void read(org.apache.thrift.protocol.TProtocol iprot, testGetLong_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list32 = iprot
                                        .readListBegin();
                                    struct.success = new ArrayList<Long>(_list32.size);
                                    for (int _i33 = 0; _i33 < _list32.size; ++_i33) {
                                        long _elem34; // required
                                        _elem34 = iprot.readI64();
                                        struct.success.add(_elem34);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testGetLong_result struct)
                throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                            org.apache.thrift.protocol.TType.I64, struct.success.size()));
                        for (long _iter35 : struct.success) {
                            oprot.writeI64(_iter35);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class testGetLong_resultTupleSchemeFactory implements SchemeFactory {
            public testGetLong_resultTupleScheme getScheme() {
                return new testGetLong_resultTupleScheme();
            }
        }

        private static class testGetLong_resultTupleScheme extends TupleScheme<testGetLong_result> {
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, testGetLong_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (long _iter36 : struct.success) {
                            oprot.writeI64(_iter36);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, testGetLong_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(
                            org.apache.thrift.protocol.TType.I64, iprot.readI32());
                        struct.success = new ArrayList<Long>(_list37.size);
                        for (int _i38 = 0; _i38 < _list37.size; ++_i38) {
                            long _elem39; // required
                            _elem39 = iprot.readI64();
                            struct.success.add(_elem39);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }

    public static class testGetDouble_args implements
        org.apache.thrift.TBase<testGetDouble_args, testGetDouble_args._Fields>,
        java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "testGetDouble_args");
        private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "uid", org.apache.thrift.protocol.TType.I64, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new testGetDouble_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new testGetDouble_argsTupleSchemeFactory());
        }
        public long uid; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            UID((short) 1, "uid");
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // UID
                        return UID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __UID_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.I64)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
                testGetDouble_args.class, metaDataMap);
        }

        public testGetDouble_args() {
        }

        public testGetDouble_args(long uid) {
            this();
            this.uid = uid;
            setUidIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testGetDouble_args(testGetDouble_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.uid = other.uid;
        }

        public testGetDouble_args deepCopy() {
            return new testGetDouble_args(this);
        }

        @Override
        public void clear() {
            setUidIsSet(false);
            this.uid = 0;
        }

        public long getUid() {
            return this.uid;
        }

        public testGetDouble_args setUid(long uid) {
            this.uid = uid;
            setUidIsSet(true);
            return this;
        }

        public void unsetUid() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
        }

        /** Returns true if field uid is set (has been assigned a value) and false otherwise */
        public boolean isSetUid() {
            return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
        }

        public void setUidIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case UID:
                    if (value == null) {
                        unsetUid();
                    } else {
                        setUid((Long) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case UID:
                    return Long.valueOf(getUid());
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch (field) {
                case UID:
                    return isSetUid();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof testGetDouble_args)
                return this.equals((testGetDouble_args) that);
            return false;
        }

        public boolean equals(testGetDouble_args that) {
            if (that == null)
                return false;
            boolean this_present_uid = true;
            boolean that_present_uid = true;
            if (this_present_uid || that_present_uid) {
                if (!(this_present_uid && that_present_uid))
                    return false;
                if (this.uid != that.uid)
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(testGetDouble_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            testGetDouble_args typedOther = (testGetDouble_args) other;
            lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetUid()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("testGetDouble_args(");
            boolean first = true;
            sb.append("uid:");
            sb.append(this.uid);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
            ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class testGetDouble_argsStandardSchemeFactory implements SchemeFactory {
            public testGetDouble_argsStandardScheme getScheme() {
                return new testGetDouble_argsStandardScheme();
            }
        }

        private static class testGetDouble_argsStandardScheme extends
            StandardScheme<testGetDouble_args> {
            public void read(org.apache.thrift.protocol.TProtocol iprot, testGetDouble_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // UID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.uid = iprot.readI64();
                                struct.setUidIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, testGetDouble_args struct)
                throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(UID_FIELD_DESC);
                oprot.writeI64(struct.uid);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class testGetDouble_argsTupleSchemeFactory implements SchemeFactory {
            public testGetDouble_argsTupleScheme getScheme() {
                return new testGetDouble_argsTupleScheme();
            }
        }

        private static class testGetDouble_argsTupleScheme extends TupleScheme<testGetDouble_args> {
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, testGetDouble_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetUid()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetUid()) {
                    oprot.writeI64(struct.uid);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, testGetDouble_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.uid = iprot.readI64();
                    struct.setUidIsSet(true);
                }
            }
        }
    }

    public static class testGetDouble_result implements
        org.apache.thrift.TBase<testGetDouble_result, testGetDouble_result._Fields>,
        java.io.Serializable, Cloneable {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "testGetDouble_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.LIST, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new testGetDouble_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new testGetDouble_resultTupleSchemeFactory());
        }
        public List<Double> success; // required

        /**
         * The set of fields this struct contains, along with convenience methods for finding and
         * manipulating them.
         */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.DOUBLE))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
                testGetDouble_result.class, metaDataMap);
        }

        public testGetDouble_result() {
        }

        public testGetDouble_result(List<Double> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public testGetDouble_result(testGetDouble_result other) {
            if (other.isSetSuccess()) {
                List<Double> __this__success = new ArrayList<Double>();
                for (Double other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public testGetDouble_result deepCopy() {
            return new testGetDouble_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Double> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(double elem) {
            if (this.success == null) {
                this.success = new ArrayList<Double>();
            }
            this.success.add(elem);
        }

        public List<Double> getSuccess() {
            return this.success;
        }

        public testGetDouble_result setSuccess(List<Double> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<Double>) value);
                    }
                    break;
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and
         * false otherwise
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }
            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof testGetDouble_result)
                return this.equals((testGetDouble_result) that);
            return false;
        }

        public boolean equals(testGetDouble_result that) {
            if (that == null)
                return false;
            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }
            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        public int compareTo(testGetDouble_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }
            int lastComparison = 0;
            testGetDouble_result typedOther = (testGetDouble_result) other;
            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
                    typedOther.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("testGetDouble_result(");
            boolean first = true;
            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
            ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class testGetDouble_resultStandardSchemeFactory implements SchemeFactory {
            public testGetDouble_resultStandardScheme getScheme() {
                return new testGetDouble_resultStandardScheme();
            }
        }

        private static class testGetDouble_resultStandardScheme extends
            StandardScheme<testGetDouble_result> {
            public void read(org.apache.thrift.protocol.TProtocol iprot, testGetDouble_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list40 = iprot
                                        .readListBegin();
                                    struct.success = new ArrayList<Double>(_list40.size);
                                    for (int _i41 = 0; _i41 < _list40.size; ++_i41) {
                                        double _elem42; // required
                                        _elem42 = iprot.readDouble();
                                        struct.success.add(_elem42);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();
                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                testGetDouble_result struct) throws org.apache.thrift.TException {
                struct.validate();
                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                            org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
                        for (double _iter43 : struct.success) {
                            oprot.writeDouble(_iter43);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }
        }

        private static class testGetDouble_resultTupleSchemeFactory implements SchemeFactory {
            public testGetDouble_resultTupleScheme getScheme() {
                return new testGetDouble_resultTupleScheme();
            }
        }

        private static class testGetDouble_resultTupleScheme extends
            TupleScheme<testGetDouble_result> {
            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, testGetDouble_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (double _iter44 : struct.success) {
                            oprot.writeDouble(_iter44);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, testGetDouble_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(
                            org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                        struct.success = new ArrayList<Double>(_list45.size);
                        for (int _i46 = 0; _i46 < _list45.size; ++_i46) {
                            double _elem47; // required
                            _elem47 = iprot.readDouble();
                            struct.success.add(_elem47);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }
    }
}
