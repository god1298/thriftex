/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ximalaya.thrift.server.spring.test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class FeedResult implements org.apache.thrift.TBase<FeedResult, FeedResult._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FeedResult");

  private static final org.apache.thrift.protocol.TField DEL_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("delNum", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField UNREAD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("unreadNum", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CURRENT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentSize", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FEED_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("feedData", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FeedResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FeedResultTupleSchemeFactory());
  }

  public int delNum; // required
  public int unreadNum; // required
  public int pageSize; // required
  public int currentSize; // required
  public List<Feed> feedData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEL_NUM((short)1, "delNum"),
    UNREAD_NUM((short)2, "unreadNum"),
    PAGE_SIZE((short)3, "pageSize"),
    CURRENT_SIZE((short)4, "currentSize"),
    FEED_DATA((short)5, "feedData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEL_NUM
          return DEL_NUM;
        case 2: // UNREAD_NUM
          return UNREAD_NUM;
        case 3: // PAGE_SIZE
          return PAGE_SIZE;
        case 4: // CURRENT_SIZE
          return CURRENT_SIZE;
        case 5: // FEED_DATA
          return FEED_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DELNUM_ISSET_ID = 0;
  private static final int __UNREADNUM_ISSET_ID = 1;
  private static final int __PAGESIZE_ISSET_ID = 2;
  private static final int __CURRENTSIZE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEL_NUM, new org.apache.thrift.meta_data.FieldMetaData("delNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNREAD_NUM, new org.apache.thrift.meta_data.FieldMetaData("unreadNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("currentSize", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEED_DATA, new org.apache.thrift.meta_data.FieldMetaData("feedData", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Feed.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FeedResult.class, metaDataMap);
  }

  public FeedResult() {
  }

  public FeedResult(
    int delNum,
    int unreadNum,
    int pageSize,
    int currentSize,
    List<Feed> feedData)
  {
    this();
    this.delNum = delNum;
    setDelNumIsSet(true);
    this.unreadNum = unreadNum;
    setUnreadNumIsSet(true);
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    this.currentSize = currentSize;
    setCurrentSizeIsSet(true);
    this.feedData = feedData;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FeedResult(FeedResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.delNum = other.delNum;
    this.unreadNum = other.unreadNum;
    this.pageSize = other.pageSize;
    this.currentSize = other.currentSize;
    if (other.isSetFeedData()) {
      List<Feed> __this__feedData = new ArrayList<Feed>();
      for (Feed other_element : other.feedData) {
        __this__feedData.add(new Feed(other_element));
      }
      this.feedData = __this__feedData;
    }
  }

  public FeedResult deepCopy() {
    return new FeedResult(this);
  }

  @Override
  public void clear() {
    setDelNumIsSet(false);
    this.delNum = 0;
    setUnreadNumIsSet(false);
    this.unreadNum = 0;
    setPageSizeIsSet(false);
    this.pageSize = 0;
    setCurrentSizeIsSet(false);
    this.currentSize = 0;
    this.feedData = null;
  }

  public int getDelNum() {
    return this.delNum;
  }

  public FeedResult setDelNum(int delNum) {
    this.delNum = delNum;
    setDelNumIsSet(true);
    return this;
  }

  public void unsetDelNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELNUM_ISSET_ID);
  }

  /** Returns true if field delNum is set (has been assigned a value) and false otherwise */
  public boolean isSetDelNum() {
    return EncodingUtils.testBit(__isset_bitfield, __DELNUM_ISSET_ID);
  }

  public void setDelNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELNUM_ISSET_ID, value);
  }

  public int getUnreadNum() {
    return this.unreadNum;
  }

  public FeedResult setUnreadNum(int unreadNum) {
    this.unreadNum = unreadNum;
    setUnreadNumIsSet(true);
    return this;
  }

  public void unsetUnreadNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNREADNUM_ISSET_ID);
  }

  /** Returns true if field unreadNum is set (has been assigned a value) and false otherwise */
  public boolean isSetUnreadNum() {
    return EncodingUtils.testBit(__isset_bitfield, __UNREADNUM_ISSET_ID);
  }

  public void setUnreadNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNREADNUM_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public FeedResult setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getCurrentSize() {
    return this.currentSize;
  }

  public FeedResult setCurrentSize(int currentSize) {
    this.currentSize = currentSize;
    setCurrentSizeIsSet(true);
    return this;
  }

  public void unsetCurrentSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTSIZE_ISSET_ID);
  }

  /** Returns true if field currentSize is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentSize() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTSIZE_ISSET_ID);
  }

  public void setCurrentSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTSIZE_ISSET_ID, value);
  }

  public int getFeedDataSize() {
    return (this.feedData == null) ? 0 : this.feedData.size();
  }

  public java.util.Iterator<Feed> getFeedDataIterator() {
    return (this.feedData == null) ? null : this.feedData.iterator();
  }

  public void addToFeedData(Feed elem) {
    if (this.feedData == null) {
      this.feedData = new ArrayList<Feed>();
    }
    this.feedData.add(elem);
  }

  public List<Feed> getFeedData() {
    return this.feedData;
  }

  public FeedResult setFeedData(List<Feed> feedData) {
    this.feedData = feedData;
    return this;
  }

  public void unsetFeedData() {
    this.feedData = null;
  }

  /** Returns true if field feedData is set (has been assigned a value) and false otherwise */
  public boolean isSetFeedData() {
    return this.feedData != null;
  }

  public void setFeedDataIsSet(boolean value) {
    if (!value) {
      this.feedData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEL_NUM:
      if (value == null) {
        unsetDelNum();
      } else {
        setDelNum((Integer)value);
      }
      break;

    case UNREAD_NUM:
      if (value == null) {
        unsetUnreadNum();
      } else {
        setUnreadNum((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case CURRENT_SIZE:
      if (value == null) {
        unsetCurrentSize();
      } else {
        setCurrentSize((Integer)value);
      }
      break;

    case FEED_DATA:
      if (value == null) {
        unsetFeedData();
      } else {
        setFeedData((List<Feed>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEL_NUM:
      return Integer.valueOf(getDelNum());

    case UNREAD_NUM:
      return Integer.valueOf(getUnreadNum());

    case PAGE_SIZE:
      return Integer.valueOf(getPageSize());

    case CURRENT_SIZE:
      return Integer.valueOf(getCurrentSize());

    case FEED_DATA:
      return getFeedData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEL_NUM:
      return isSetDelNum();
    case UNREAD_NUM:
      return isSetUnreadNum();
    case PAGE_SIZE:
      return isSetPageSize();
    case CURRENT_SIZE:
      return isSetCurrentSize();
    case FEED_DATA:
      return isSetFeedData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FeedResult)
      return this.equals((FeedResult)that);
    return false;
  }

  public boolean equals(FeedResult that) {
    if (that == null)
      return false;

    boolean this_present_delNum = true;
    boolean that_present_delNum = true;
    if (this_present_delNum || that_present_delNum) {
      if (!(this_present_delNum && that_present_delNum))
        return false;
      if (this.delNum != that.delNum)
        return false;
    }

    boolean this_present_unreadNum = true;
    boolean that_present_unreadNum = true;
    if (this_present_unreadNum || that_present_unreadNum) {
      if (!(this_present_unreadNum && that_present_unreadNum))
        return false;
      if (this.unreadNum != that.unreadNum)
        return false;
    }

    boolean this_present_pageSize = true;
    boolean that_present_pageSize = true;
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    boolean this_present_currentSize = true;
    boolean that_present_currentSize = true;
    if (this_present_currentSize || that_present_currentSize) {
      if (!(this_present_currentSize && that_present_currentSize))
        return false;
      if (this.currentSize != that.currentSize)
        return false;
    }

    boolean this_present_feedData = true && this.isSetFeedData();
    boolean that_present_feedData = true && that.isSetFeedData();
    if (this_present_feedData || that_present_feedData) {
      if (!(this_present_feedData && that_present_feedData))
        return false;
      if (!this.feedData.equals(that.feedData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FeedResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FeedResult typedOther = (FeedResult)other;

    lastComparison = Boolean.valueOf(isSetDelNum()).compareTo(typedOther.isSetDelNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delNum, typedOther.delNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnreadNum()).compareTo(typedOther.isSetUnreadNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnreadNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unreadNum, typedOther.unreadNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(typedOther.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, typedOther.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentSize()).compareTo(typedOther.isSetCurrentSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentSize, typedOther.currentSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeedData()).compareTo(typedOther.isSetFeedData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeedData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedData, typedOther.feedData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FeedResult(");
    boolean first = true;

    sb.append("delNum:");
    sb.append(this.delNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unreadNum:");
    sb.append(this.unreadNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pageSize:");
    sb.append(this.pageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentSize:");
    sb.append(this.currentSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("feedData:");
    if (this.feedData == null) {
      sb.append("null");
    } else {
      sb.append(this.feedData);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'delNum' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'unreadNum' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'pageSize' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'currentSize' because it's a primitive and you chose the non-beans generator.
    if (feedData == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'feedData' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FeedResultStandardSchemeFactory implements SchemeFactory {
    public FeedResultStandardScheme getScheme() {
      return new FeedResultStandardScheme();
    }
  }

  private static class FeedResultStandardScheme extends StandardScheme<FeedResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FeedResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEL_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.delNum = iprot.readI32();
              struct.setDelNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UNREAD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unreadNum = iprot.readI32();
              struct.setUnreadNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CURRENT_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.currentSize = iprot.readI32();
              struct.setCurrentSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FEED_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.feedData = new ArrayList<Feed>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  Feed _elem10; // required
                  _elem10 = new Feed();
                  _elem10.read(iprot);
                  struct.feedData.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setFeedDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDelNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'delNum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUnreadNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'unreadNum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPageSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pageSize' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCurrentSize()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'currentSize' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FeedResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DEL_NUM_FIELD_DESC);
      oprot.writeI32(struct.delNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNREAD_NUM_FIELD_DESC);
      oprot.writeI32(struct.unreadNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.pageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_SIZE_FIELD_DESC);
      oprot.writeI32(struct.currentSize);
      oprot.writeFieldEnd();
      if (struct.feedData != null) {
        oprot.writeFieldBegin(FEED_DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.feedData.size()));
          for (Feed _iter11 : struct.feedData)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FeedResultTupleSchemeFactory implements SchemeFactory {
    public FeedResultTupleScheme getScheme() {
      return new FeedResultTupleScheme();
    }
  }

  private static class FeedResultTupleScheme extends TupleScheme<FeedResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FeedResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.delNum);
      oprot.writeI32(struct.unreadNum);
      oprot.writeI32(struct.pageSize);
      oprot.writeI32(struct.currentSize);
      {
        oprot.writeI32(struct.feedData.size());
        for (Feed _iter12 : struct.feedData)
        {
          _iter12.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FeedResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.delNum = iprot.readI32();
      struct.setDelNumIsSet(true);
      struct.unreadNum = iprot.readI32();
      struct.setUnreadNumIsSet(true);
      struct.pageSize = iprot.readI32();
      struct.setPageSizeIsSet(true);
      struct.currentSize = iprot.readI32();
      struct.setCurrentSizeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.feedData = new ArrayList<Feed>(_list13.size);
        for (int _i14 = 0; _i14 < _list13.size; ++_i14)
        {
          Feed _elem15; // required
          _elem15 = new Feed();
          _elem15.read(iprot);
          struct.feedData.add(_elem15);
        }
      }
      struct.setFeedDataIsSet(true);
    }
  }

}

